{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogsItem/DialogsItem.module.css","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogsItem/DialogsItem.tsx","components/Dialogs/Dialogs.tsx","HOC/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Message","props","className","styles","message","DialogsItem","dialog","to","id","name","maxLength50","maxLengthCreator","AddMessageFormDialog","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","mapStateToPropsForRedirect","state","isAuth","auth","mapStateToProps","dialogsPage","mapDispatchToProps","dispatch","sendMessage","newMessageBody","SendMessageActionCreator","compose","connect","Component","restProps","main","dialogs","map","t","messages","index","formData"],"mappings":"uFACAA,EAAOC,QAAU,CAAC,KAAO,sBAAsB,QAAU,yBAAyB,OAAS,wBAAwB,OAAS,wBAAwB,QAAU,2B,oBCA9JD,EAAOC,QAAU,CAAC,KAAO,sBAAsB,QAAU,yBAAyB,OAAS,wBAAwB,OAAS,wBAAwB,QAAU,2B,oBCA9JD,EAAOC,QAAU,CAAC,KAAO,0BAA0B,QAAU,6BAA6B,OAAS,4BAA4B,OAAS,4BAA4B,QAAU,+B,yMCQjKC,EAAU,SAACC,GACpB,OACI,qBAAKC,UAAWC,IAAOC,QAAvB,SAAiCH,EAAMG,W,0BCDlCC,EAAc,SAACJ,GACxB,OACI,qBAAKC,UAAWC,IAAOG,OAAvB,SAA+B,cAAC,IAAD,CAASC,GAAI,YAAcN,EAAMO,GAAjC,SAAsCP,EAAMQ,U,mCCqC/EC,EAAcC,YAAiB,IAkB7BC,EAAuBC,YAAoB,CAACC,KAAM,8BAA3BD,EAhBV,SAACZ,GAGhB,OACI,uBAAMc,SAAUd,EAAMe,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAACC,IAAUX,GAAcD,KAAM,iBAAkBa,YAAa,oBAGxG,8BACI,kD,yCCnDZC,EAA6B,SAACC,GAC9B,MAAO,CACHC,OAAQD,EAAME,KAAKD,SCHpB,IAAME,EAAkB,SAACH,GAC5B,MAAO,CACHI,YAAaJ,EAAMI,cAIdC,EAAqB,SAACC,GAC/B,MAAO,CAIHC,YAAa,SAACC,GACVF,EAASG,YAAyBD,OAM/BE,sBAA6BC,YAAQR,EAAiBE,IDX9D,SAA6BO,GAYhC,OAAOD,YAAQZ,EAARY,EAXP,SAA2BlC,GAA6B,IAE/CwB,EAAwBxB,EAAxBwB,OAAWY,EAFmC,YAEtBpC,EAFsB,YAInD,OAAKwB,EAGE,cAACW,EAAD,eAAeC,IAHF,cAAC,IAAD,CAAU9B,GAAG,gBCM1B2B,EFLoC,SAACjC,GAYhD,OACI,sBAAKC,UAAWC,IAAOmC,KAAvB,UACI,qBAAKpC,UAAWC,IAAOoC,QAAvB,SACKtC,EAAM2B,YAAYW,QAAQC,KAAI,SAACC,GAAD,OAAO,cAAC,EAAD,CAAahC,KAAMgC,EAAEhC,KAAMD,GAAIiC,EAAEjC,IACfiC,EAAEjC,SAE9D,sBAAKN,UAAWC,IAAOuC,SAAvB,UACI,oCAAOzC,EAAM2B,YAAYc,SAASF,KAAI,SAACC,EAAGE,GAAJ,OAAc,cAAC,EAAD,CAASvC,QAASqC,EAAErC,SACNuC,SAClE,cAAC/B,EAAD,CAAsBG,SAlBZ,SAAC6B,GACnB3C,EAAM8B,YAAYa,EAASZ","file":"static/js/3.abc5cb92.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Dialogs_main__2UXer\",\"dialogs\":\"Dialogs_dialogs__luw1S\",\"dialog\":\"Dialogs_dialog__19LfF\",\"active\":\"Dialogs_active__3Kcdw\",\"message\":\"Dialogs_message__2luxZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Message_main__1xDAO\",\"dialogs\":\"Message_dialogs__256Ta\",\"dialog\":\"Message_dialog__1QWPf\",\"active\":\"Message_active__2HtPS\",\"message\":\"Message_message__2OemR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"DialogsItem_main__1Du3v\",\"dialogs\":\"DialogsItem_dialogs__3HVJ2\",\"dialog\":\"DialogsItem_dialog__3OiEX\",\"active\":\"DialogsItem_active__24LO9\",\"message\":\"DialogsItem_message__iR8I0\"};","import React from 'react';\r\nimport styles from \"./Message.module.css\";\r\n\r\n\r\ntype  MessagePropsType = {\r\n    message: string\r\n\r\n}\r\n\r\nexport const Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={styles.message}>{props.message}</div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport styles from \"./DialogsItem.module.css\";\r\n\r\n\r\ntype  DialogsItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport const DialogsItem = (props: DialogsItemPropsType) => {\r\n    return (\r\n        <div className={styles.dialog}><NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink></div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport styles from \"./Dialogs.module.css\";\r\nimport {Message} from './Message/Message';\r\nimport {DialogsItem} from \"./DialogsItem/DialogsItem\";\r\nimport {DialogsPageType} from \"../../redux/dialogs-reduсer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../FormsControls/Textarea\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\n\r\ntype  DialogsPropsType = {\r\n    updateNewPostBody: (body: string) => void\r\n    sendMessage: (newMessageBody: string) => void\r\n    dialogsPage: DialogsPageType\r\n    isAuth: boolean\r\n}\r\n\r\n\r\ntype  FormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n\r\n\r\n    const addNewMessage = (formData: FormType) => {\r\n        props.sendMessage(formData.newMessageBody)\r\n    }\r\n\r\n    // if (!props.isAuth) {\r\n    //   return <Redirect to={\"/login\"}/>\r\n    // }\r\n\r\n\r\n    return (\r\n        <div className={styles.main}>\r\n            <div className={styles.dialogs}>\r\n                {props.dialogsPage.dialogs.map((t) => <DialogsItem name={t.name} id={t.id}\r\n                                                                   key={t.id}/>)}\r\n            </div>\r\n            <div className={styles.messages}>\r\n                <div> {props.dialogsPage.messages.map((t, index) => <Message message={t.message}\r\n                                                                             key={index}/>)}</div>\r\n                <AddMessageFormDialog onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nlet maxLength50 = maxLengthCreator(50)\r\n\r\nconst FormDialog = (props: InjectedFormProps<FormType>) => {\r\n\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} validate={[required, maxLength50]} name={\"newMessageBody\"} placeholder={\"Enter message\"}/>\r\n            </div>\r\n\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormDialog = reduxForm<FormType>({form: \"dialogAddMessageFormDialog\"})(FormDialog)\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateReduxType} from \"../redux/redux-store\";\r\n\r\n\r\ntype  MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: StateReduxType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: MapStateToPropsType) {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to=\"/login\"/>\r\n\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}\r\n\r\n","import {connect} from \"react-redux\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {SendMessageActionCreator} from \"../../redux/dialogs-reduсer\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport React from \"react\";\r\nimport {WithAuthRedirect} from \"../../HOC/withAuthRedirect\";\r\nimport {StateReduxType} from \"../../redux/redux-store\";\r\n\r\n\r\nexport const mapStateToProps = (state: StateReduxType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        // isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport const mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        // updateNewPostBody: (body: string) => {\r\n        //     dispatch(updateNewPostBodyActionCreator(body))\r\n        // },\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(SendMessageActionCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps), WithAuthRedirect)(Dialogs)\r\n\r\n// export const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent) /*получаем новую контейнерную компоненту*/"],"sourceRoot":""}