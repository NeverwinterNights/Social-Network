{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogsItem/DialogsItem.module.css","redux/dialogs-reduсer.ts","Api/Api.ts","redux/profile-reducer.ts","redux/sidebar-reducer.ts","redux/users-reduсer.ts","redux/auth-reduсer.ts","redux/app-reduсer.ts","redux/redux-store.ts","components/Friends/Friend/Friend.tsx","components/Friends/Friends.tsx","components/Navbar/Navbar.tsx","img/neand.png","components/Users/Paginator.tsx","components/Users/Users.tsx","img/3.svg","components/preloader/Preloader.tsx","HOC/withAuthRedirect.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","img/mountain.jpg","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","img/bird.jpg","components/Profile/MyPosts/Post/Post.tsx","utils/validators/validators.ts","components/FormsControls/Textarea.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","img/dragon.png","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/FormsControls/Input.tsx","components/Login/Login.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogsItem/DialogsItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/Friends/Friends.module.css","components/Navbar/Navbar.module.css","components/Users/Users.module.css","components/FormsControls/Textarea.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Header/Header.module.css","components/Dialogs/Dialogs.module.css","components/preloader/Preloader.module.css","components/Profile/MyPosts/MyPosts.module.css"],"names":["module","exports","initialState","dialogs","id","name","messages","message","instance","axios","create","withCredentials","baseURL","headers","userAPI","currentPage","pageSize","get","then","response","data","userID","post","delete","profileAPI","getProfile","getStatus","updateStatus","status","put","authAPI","email","password","rememberMe","posts","likesCount","profile","setStatus","type","friends","users","totalUsersCount","isFetching","followingProgress","followSuccess","unFollowSuccess","setUsers","setCurrentPage","setPreloader","setFollowingInProgress","login","isAuth","setUserData","payload","getAuthUserData","dispatch","a","resultCode","initialized","reducers","combineReducers","dialogsPage","state","action","stateCopy","body","newMessageBody","push","profilePage","newPostText","filter","sidebar","usersPage","map","u","followed","totalCount","t","auth","form","formReducer","appReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Friend","props","className","styles","item","images","image","src","alt","Friends","main","row","names","index","Navbar","nav","menu","activeClassName","active","to","href","getState","Paginator","OnPageHandler","portionSize","pagesCount","Math","ceil","pages","i","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pagination_wrapper","onClick","p","selectedPage","Users","useDispatch","OnClickPageHandler","photos","small","disabled","followingInProgress","some","unfollow","follow","Preloader","img","preloader","mapStateToPropsForRedirect","WithAuthRedirect","Component","connect","restProps","getUsersSuper","createSelector","user","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingProgress","UsersContainer","pageNumber","getUsers","this","React","items","ProfileStatus","editMode","setEditMode","useEffect","ofEditMode","onKeyPress","e","charCode","onChange","currentTarget","value","autoFocus","onBlur","onDoubleClick","ProfileInfo","mountains","large","aboutMe","lookingForAJobDescription","fullName","Post","bird","wrap","likes","required","undefined","maxLengthCreator","maxLength","length","Textarea","input","meta","formControl","touched","error","MyPosts","memo","AddNewPostForm","onSubmit","values","addPost","reduxForm","handleSubmit","Field","component","validate","placeholder","MyPostsContainer","addPostActionCreator","Profile","ProfileContainer","match","params","userId","history","getUserProfile","withRouter","Header","header","dragon","loginOut","HeaderContainer","Input","LoginFormRedux","formData","Message","DialogsItem","dialog","maxLength50","AddMessageFormDialog","sendMessage","SendMessageActionCreator","App","initializeApp","exact","path","render","DialogsContainer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.199e92a8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"ProfileInfo_img__2lCOw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Message_main__1xDAO\",\"dialogs\":\"Message_dialogs__256Ta\",\"dialog\":\"Message_dialog__1QWPf\",\"active\":\"Message_active__2HtPS\",\"message\":\"Message_message__2OemR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"DialogsItem_main__1Du3v\",\"dialogs\":\"DialogsItem_dialogs__3HVJ2\",\"dialog\":\"DialogsItem_dialog__3OiEX\",\"active\":\"DialogsItem_active__24LO9\",\"message\":\"DialogsItem_message__iR8I0\"};","import {DialogsType, MessagesType} from \"./store\";\r\n\r\n\r\nexport type  DialogsPageType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n\r\n}\r\n\r\n\r\nexport type  SendMessageActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"SEND-MESSAGE\"\r\n    newMessageBody:string\r\n}\r\n\r\n\r\n// export const updateNewPostBodyActionCreator = (body: string): UpdateNewPostBodyActionType => {\r\n//     return {\r\n//         type: \"UPDATE-NEW-POST-BODY\",\r\n//         body: body\r\n//     }\r\n// }\r\n\r\nexport const SendMessageActionCreator = (newMessageBody:string): SendMessageActionType => {\r\n    return {\r\n        type: \"SEND-MESSAGE\",\r\n        newMessageBody\r\n    }\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Ivan\"},\r\n        {id: 2, name: \"Oleg\"},\r\n        {id: 3, name: \"Misha\"},\r\n        {id: 4, name: \"Petr\"},\r\n        {id: 5, name: \"Alex\"},\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Privet\"},\r\n        {id: 2, message: \"How are you\"},\r\n        {id: 3, message: \"Lets we meet\"},\r\n        {id: 4, message: \"No\"},\r\n    ],\r\n   }\r\n\r\n\r\nexport const dialogsReducer = (state: DialogsPageType = initialState, action: SendMessageActionType) => {\r\n    switch (action.type) {\r\n        // case \"UPDATE-NEW-POST-BODY\": {\r\n        //     let stateCopy = {...state} /*делается копия для правильного изменения стейта*/\r\n        //     action.newMessageBody = action.body /* была параметр ф, а теперь мы берем его из экшена*/\r\n        //     return stateCopy\r\n        // }\r\n        case \"SEND-MESSAGE\": {\r\n            let stateCopy = {...state, messages: [...state.messages]}/* делается глубокая копия стейта и мессаджес в стейте*/\r\n            let body = action.newMessageBody/* была параметр ф, а теперь мы берем его из экшена*/\r\n\r\n\r\n            stateCopy.messages.push({id: 5, message: body})\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n","import axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        \"API-KEY\": \"7c38f700-eae7-4224-81a9-9392ebf67fbb\"\r\n    }\r\n})\r\n\r\n\r\nexport const userAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)  /*приклеиваем сюда baseURL и продолжение адерса*/\r\n            .then(response => response.data) /*уменьшаем получаемый респонс*/\r\n    },\r\n    follow(userID: number) {\r\n        return instance.post(`follow/${userID}`)\r\n    },\r\n    unfollow(userID: number) {\r\n        return instance.delete(`follow/${userID}`)\r\n    },\r\n    getProfile(userID: string) {\r\n        return profileAPI.getProfile(userID)\r\n    }\r\n}\r\n\r\n\r\nexport const profileAPI = {\r\n\r\n    getProfile(userID: string) {\r\n        return instance.get(`profile/` + userID)\r\n    },\r\n    getStatus(userID: string) {\r\n        return instance.get(`profile/status/` + userID)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status/`, {status})\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    loginOut() {\r\n        return instance.delete(`auth/login`)\r\n    },\r\n}\r\n\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {profileAPI, userAPI} from \"../Api/Api\";\r\n\r\nexport  type  PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\n\r\nexport type ProfileType = {\r\n    photos: PhotosType\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n}\r\ntype PhotosType = {\r\n    'small': string\r\n    'large': string\r\n}\r\ntype  ContactsType = {\r\n    facebook: string\r\n    website: null\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: null\r\n    github: string\r\n    mainLink: null\r\n}\r\n\r\n\r\nexport type  ProfilePageType = {\r\n    status: string;\r\n    posts: Array<PostsType>\r\n    profile: null | ProfileType\r\n}\r\n\r\nexport type  AddPostActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"PROFILE/ADD-POST\"\r\n    newPostText: string\r\n}\r\n\r\nexport type DeletePostActionType = ReturnType<typeof deletePostActionCreator>\r\n\r\n\r\n// export type  UpdateNewPostActionType = { /*необходимо для типизации диспатчка*/\r\n//     type: \"UPDATE-NEW-POST-TEXT\"\r\n//     newText: string\r\n// }\r\n\r\n\r\nexport type  SetUserProfileActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"PROFILE/SET-USER-PROFILE\"\r\n    profile: null | ProfileType\r\n\r\n}\r\n\r\nexport type  setStatusActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"PROFILE/SET-STATUS\"\r\n    status: string\r\n\r\n}\r\n\r\n\r\nexport type  ActionsType =\r\n    AddPostActionType\r\n    | SetUserProfileActionType\r\n    | setStatusActionType\r\n    | DeletePostActionType\r\n\r\n\r\n/*Создаем инициализационный стейт для profileReducer*/\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hello\", likesCount: 8},\r\n        {id: 2, message: \"How are you?\", likesCount: 15},\r\n        {id: 3, message: \"Where are you?\", likesCount: 50},\r\n        {id: 4, message: \"Fuck You\", likesCount: 5},\r\n\r\n    ],\r\n    profile: null,\r\n    status: \"\"\r\n}\r\n\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: ActionsType): ProfilePageType => { /*указываем стейту инициализационное значение*/\r\n    switch (action.type) {\r\n        case \"PROFILE/SET-STATUS\": {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case \"PROFILE/ADD-POST\": {\r\n            // let newPost: PostsType = {\r\n            //     id: 5,\r\n            //     message: state.newPostText,\r\n            //     likesCount: 0\r\n            // }\r\n            return {\r\n                ...state,\r\n                posts: [{\r\n                    id: 5,\r\n                    message: action.newPostText,\r\n                    likesCount: 0\r\n                }, ...state.posts],\r\n            } /*делается копия для правильного изменения стейта*/\r\n\r\n            // stateCopy.posts.unshift(newPost) /*стейт тут приходит в пропсах это this._state.profilePage*/\r\n            // stateCopy.newPostText = \"\"\r\n            // return stateCopy\r\n            // break; /*брейк можно заменить ретурн стейт в каждом кейсе*/\r\n        }\r\n        case \"PROFILE/SET-USER-PROFILE\": {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case \"PROFILE/DELETE-POST\": {\r\n            return {...state, posts: state.posts.filter((post) => post.id != action.id)}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const addPostActionCreator = (newPostText: string): AddPostActionType => {\r\n    return {\r\n        type: \"PROFILE/ADD-POST\",\r\n        newPostText\r\n    }\r\n}\r\n\r\nexport const deletePostActionCreator = (id: number) => {\r\n    return {\r\n        type: \"PROFILE/DELETE-POST\",\r\n        id\r\n    } as const\r\n}\r\n\r\n\r\n/*ф. возвращающая экшен, ее вызывают в компоненте в диспатче\r\nи прокидывают в параметрах данные сюда. АК экспорт. его не надо прокидывать пропсами props.dispatch (updateNewPostActionCreator(text)) */\r\n\r\nexport const setUserProfile = (profile: null | ProfileType): SetUserProfileActionType => {\r\n    return {\r\n        type: \"PROFILE/SET-USER-PROFILE\",\r\n        profile\r\n    }\r\n}\r\n\r\nexport const setStatus = (status: string): setStatusActionType => {\r\n    return {\r\n        type: \"PROFILE/SET-STATUS\",\r\n        status\r\n    }\r\n}\r\n\r\nexport const getUserProfile = (userID: string) => async (dispatch: Dispatch) => {\r\n    const response = await userAPI.getProfile(userID)\r\n    dispatch(setUserProfile(response.data))/*отправляем полученные данные в стейт*/\r\n}\r\n\r\n\r\nexport const getStatus = (userID: string) => async (dispatch: Dispatch) => {\r\n    const response = await profileAPI.getStatus(userID)\r\n    dispatch(setStatus(response.data))/*отправляем полученные данные в стейт*/\r\n}\r\n\r\nexport const updateStatus = (status: string) => async (dispatch: Dispatch) => {\r\n    const response = await profileAPI.updateStatus(status)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status))/*отправляем полученные данные в стейт*/\r\n    }\r\n}","import {SidebarType} from \"./store\";\r\n\r\n\r\nlet initialState = {\r\n    friends: [\r\n        {name: \"Ivan\"},\r\n        {name: \"Oleg\"},\r\n        {name: \"Petr\"},\r\n        {name: \"Vasa\"},\r\n        {name: \"Sergei\"},\r\n        {name: \"Margo\"}\r\n    ]\r\n}\r\n\r\n\r\nexport const sidebarReducer = (state: SidebarType = initialState, action: any) => {\r\n\r\n    return state\r\n}","import {Dispatch} from \"redux\";\r\nimport {userAPI} from \"../Api/Api\";\r\n\r\nexport type  FollowActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"USERS/FOLLOW\"\r\n    userID: number\r\n}\r\n\r\nexport type  UnFollowActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"USERS/UNFOLLOW\"\r\n    userID: number\r\n}\r\n\r\nexport type  SetUsersActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"USERS/SET-USERS\"\r\n    users: Array<UsersType>\r\n}\r\n\r\nexport type  SetCurrentPageActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"USERS/SET-CURRENT-PAGE\"\r\n    currentPage: number\r\n}\r\n\r\nexport type  SetUsersTotalCountActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"USERS/SET-CURRENT-TOTAL-COUNT\"\r\n    totalCount: number\r\n}\r\n\r\nexport type  SetPreloaderActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"USERS/SET-PRELOADER\"\r\n    isFetching: boolean\r\n}\r\nexport type  FollowingInProgressActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"USERS/FOLLOWING-IN-PROGRESS\"\r\n    userID: number\r\n    isFetching: boolean\r\n}\r\n\r\n\r\n////\r\n\r\n\r\nexport type  UsersMainType = {  /*типизация стейта локального*/\r\n    users: Array<UsersType>\r\n    pageSize: number,\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingProgress: number[]\r\n}\r\n\r\nexport type  UsersType = {\r\n    id: number\r\n    photos: PhotosType\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: LocationType\r\n}\r\n\r\nexport type  PhotosType = {\r\n    small: null | string\r\n    large: null | string\r\n\r\n}\r\n\r\ntype  LocationType = {\r\n    city: string\r\n    country: string\r\n}\r\n\r\n\r\nexport type  ActionType =\r\n    FollowActionType\r\n    | UnFollowActionType\r\n    | SetUsersActionType\r\n    | SetCurrentPageActionType\r\n    | SetUsersTotalCountActionType\r\n    | SetPreloaderActionType\r\n    | FollowingInProgressActionType\r\n\r\n\r\nlet initialState: UsersMainType = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingProgress: []\r\n}\r\n\r\n\r\nexport const usersReducer = (state: UsersMainType = initialState, action: ActionType): UsersMainType => {\r\n    switch (action.type) {\r\n        case \"USERS/FOLLOW\": {\r\n            return {\r\n                ...state,\r\n                users: state.users.map((u) => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        }\r\n\r\n        case \"USERS/UNFOLLOW\": {\r\n            return {\r\n                ...state,\r\n                users: state.users.map((u) => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        }\r\n        case \"USERS/SET-USERS\": {\r\n            return {...state, users: action.users}\r\n        }\r\n        case \"USERS/SET-CURRENT-PAGE\": {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case \"USERS/SET-CURRENT-TOTAL-COUNT\": {\r\n            return {...state, totalUsersCount: action.totalCount}\r\n        }\r\n        case \"USERS/SET-PRELOADER\": {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case \"USERS/FOLLOWING-IN-PROGRESS\": {\r\n            return {\r\n                ...state,\r\n                followingProgress: action.isFetching\r\n                    ? [...state.followingProgress, action.userID]\r\n                    : state.followingProgress.filter((t) => t !== action.userID)\r\n\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n/*Это экшен криэйторы у которых в названии в конце убрали букву AC*/\r\n\r\n\r\nexport const followSuccess = (userID: number): FollowActionType => {\r\n    return {\r\n        type: \"USERS/FOLLOW\",\r\n        userID: userID\r\n    }\r\n}\r\nexport const unFollowSuccess = (userID: number): UnFollowActionType => {\r\n    return {\r\n        type: \"USERS/UNFOLLOW\",\r\n        userID: userID\r\n    }\r\n}\r\nexport const setUsers = (users: Array<UsersType>): SetUsersActionType => {\r\n    return {\r\n        type: \"USERS/SET-USERS\",\r\n        users: users\r\n    }\r\n}\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageActionType => {\r\n    return {\r\n        type: \"USERS/SET-CURRENT-PAGE\",\r\n        currentPage: currentPage\r\n    }\r\n}\r\nexport const setTotalUsersCount = (totalCount: number): SetUsersTotalCountActionType => {\r\n    return {\r\n        type: \"USERS/SET-CURRENT-TOTAL-COUNT\",\r\n        totalCount: totalCount\r\n    }\r\n}\r\nexport const setPreloader = (isFetching: boolean): SetPreloaderActionType => {\r\n    return {\r\n        type: \"USERS/SET-PRELOADER\",\r\n        isFetching: isFetching\r\n    }\r\n}\r\nexport const setFollowingInProgress = (userID: number, isFetching: boolean): FollowingInProgressActionType => {\r\n    return {\r\n        type: \"USERS/FOLLOWING-IN-PROGRESS\",\r\n        userID: userID,\r\n        isFetching: isFetching\r\n    }\r\n}\r\n\r\n\r\n/*санки*/\r\n\r\nexport const getUsersThunkCreator = (currentPage: number, pageSize: number) => async (dispatch: Dispatch) => {  /*это санка*/\r\n\r\n    dispatch(setPreloader(true))\r\n    dispatch(setCurrentPage(currentPage))\r\n    const data = await userAPI.getUsers(currentPage, pageSize)\r\n    dispatch(setPreloader(false))\r\n    dispatch(setUsers(data.items))\r\n    dispatch(setTotalUsersCount(data.totalCount))\r\n}\r\n\r\n\r\nexport const follow = (userID: number) => { /*это криэйтор санки*/\r\n    return async (dispatch: Dispatch) => {   /*это санка*/\r\n        dispatch(setFollowingInProgress(userID, true))\r\n        const response = await userAPI.follow(userID)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(followSuccess(userID))\r\n        }\r\n        dispatch(setFollowingInProgress(userID, false))\r\n    }\r\n}\r\n\r\nexport const unfollow = (userID: number) => { /*это криэйтор санки*/\r\n    return async (dispatch: Dispatch) => {   /*это санка*/\r\n        dispatch(setFollowingInProgress(userID, true))\r\n        const response = await userAPI.unfollow(userID)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(unFollowSuccess(userID))\r\n        }\r\n        dispatch(setFollowingInProgress(userID, false))\r\n    }\r\n}\r\n\r\n\r\n","import {authAPI} from \"../Api/Api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {StateReduxType} from \"./redux-store\";\r\nimport {FormAction} from \"redux-form\";\r\n\r\nexport type  AuthMainActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"AUTH/SET-USER-DATA\"\r\n    payload: {\r\n        id: null | number\r\n        email: null | string\r\n        login: null | string\r\n        isAuth: boolean\r\n    }\r\n}\r\n////\r\n\r\n\r\nexport type  AuthMainType = {  /*типизация стейта локального*/\r\n    id: null | number\r\n    email: null | string\r\n    login: null | string\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nexport type  ActionType = AuthMainActionType\r\n\r\n\r\n// let initialState: AuthMainType = {\r\n//     data: {\r\n//         id: 2,\r\n//         email: null,\r\n//         login: null,\r\n//     },\r\n//     isAuth: false\r\n// }\r\n\r\n\r\nlet initialState: AuthMainType = {\r\n    id: 2,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\n\r\n\r\nexport const authReducer = (state: AuthMainType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n\r\n        case \"AUTH/SET-USER-DATA\": {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setUserData = (id: number | null, email: null | string, login: null | string, isAuth: boolean): AuthMainActionType => {\r\n    return {\r\n        type: \"AUTH/SET-USER-DATA\",\r\n        payload: {\r\n            id,\r\n            email,\r\n            login,\r\n            isAuth\r\n        }\r\n    }\r\n}\r\n\r\nexport const getAuthUserData = () => async (dispatch: Dispatch) => {\r\n    let response = await authAPI.me()\r\n\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data\r\n        dispatch(setUserData(id, email, login, true))\r\n    } /*отправляем полученные данные в стейт*/\r\n\r\n}\r\n\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean): ThunkAction<void, StateReduxType, unknown, ActionType | FormAction> => async (dispatch) => {\r\n\r\n    let response = await authAPI.login(email, password, rememberMe)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData())\r\n    }\r\n}\r\n\r\n\r\nexport const loginOut = () => (dispatch: Dispatch) => {\r\n\r\n    authAPI.loginOut()  /*чтобы прееделать в асинк пишем после стрелки async тут делаем переменную и await убираем зен*/\r\n        .then((response) => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setUserData(null, null, null, false))\r\n            }\r\n        })\r\n\r\n}\r\n\r\n","import {getAuthUserData} from \"./auth-reduсer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {StateReduxType} from \"./redux-store\";\r\n\r\nexport type  initializedActionType = {\r\n    type: \"INITIALIZED-SUCCESSES\"\r\n}\r\n//\r\n\r\n\r\nexport type  AuthMainType = {  /*типизация стейта локального*/\r\n    initialized: boolean,\r\n}\r\n\r\n\r\nexport type  ActionType = initializedActionType\r\n\r\n\r\ntype ThunkTyoe = ThunkAction<void, StateReduxType, unknown, ActionType>\r\n\r\n\r\nlet initialState: AuthMainType = {\r\n    initialized: false,\r\n}\r\n\r\n\r\nexport const appReducer = (state: AuthMainType = initialState, action: ActionType): AuthMainType => {\r\n    switch (action.type) {\r\n\r\n        case \"INITIALIZED-SUCCESSES\": {\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const initializedSuccess = (): initializedActionType => {\r\n    return {\r\n        type: \"INITIALIZED-SUCCESSES\",\r\n    }\r\n}\r\n\r\nexport const initializeApp = (): ThunkTyoe => (dispatch) => {\r\n    let prom = dispatch(getAuthUserData())\r\n\r\n    prom.then(() => {\r\n        dispatch(initializedSuccess())\r\n\r\n    })\r\n\r\n}\r\n\r\n//\r\n// export const login = (email: string, password: string, rememberMe: boolean): ThunkAction<void, StateReduxType, unknown, ActionType | FormAction> => (dispatch) => {\r\n//\r\n//     authAPI.login(email, password, rememberMe)\r\n//         .then((response) => {\r\n//             if (response.data.resultCode === 0) {\r\n//                 dispatch(getAuthUserData())\r\n//             }\r\n//         })\r\n//\r\n// }\r\n//\r\n//\r\n// export const loginOut = () => (dispatch: Dispatch) => {\r\n//\r\n//     authAPI.loginOut()\r\n//         .then((response) => {\r\n//             if (response.data.resultCode === 0) {\r\n//                 dispatch(setUserData(null, null, null, false))\r\n//             }\r\n//         })\r\n//\r\n// }\r\n\r\n","import {applyMiddleware, combineReducers, compose, createStore, Store} from \"redux\";\r\nimport {dialogsReducer} from \"./dialogs-reduсer\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {sidebarReducer} from \"./sidebar-reducer\";\r\nimport {usersReducer} from \"./users-reduсer\";\r\nimport {authReducer} from \"./auth-reduсer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {appReducer} from \"./app-reduсer\";\r\n\r\n\r\nlet reducers = combineReducers({ /*создается общий редьюсер с помощью спец команды, внутрь котор вставляют редюсеры имеющиеся*/\r\n    dialogsPage: dialogsReducer,  /*ключ это элем общий из стейта, значя относящийся к нему релдьюсер*/\r\n    profilePage: profileReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    appReducer: appReducer\r\n})\r\n\r\n// const composeEnhancers = window['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__'] as typeof compose || compose;\r\nconst composeEnhancers =(window && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store: Store<StateReduxType> = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n\r\nexport type StateReduxType = ReturnType<typeof reducers>/*скопировал из впервой версии*/\r\n\r\n\r\n// export let store: Store<StateReduxType> = createStore(reducers) /*это шаблон создания стора*/\r\n// export let store: Store<StateReduxType> = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n// export let store: any = createStore(reducers) /*это шаблон создания стора help*/\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport styles from \"./../Friends.module.css\";\r\n\r\n\r\ntype  FriendPropsType = {\r\n    name:string\r\n\r\n}\r\n\r\n\r\nexport const Friend = (props:FriendPropsType) => {\r\n    return (\r\n        <div className={styles.item}>\r\n            <div className={styles.images}>\r\n                <img className={styles.image} src=\"https://www.film.ru/sites/default/files/news/44976246-1097247.jpg\" alt=\"\"/>\r\n            </div>\r\n            <div className={styles.name}>\r\n                <span>{props.name}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport {FriendsType} from \"../../redux/store\";\r\nimport {Friend} from \"./Friend/Friend\";\r\nimport styles from \"./Friends.module.css\";\r\n\r\n\r\ntype  FriendsPropsType = {\r\n    names: Array<FriendsType>\r\n}\r\n\r\nexport const Friends = (props: FriendsPropsType) => {\r\n    return (\r\n        <div className={styles.main}>\r\n            <h3>Best Friends</h3>\r\n            <div className={styles.row}>\r\n                {props.names.map((t, index) => <Friend name={t.name} key={index}/>)}\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\n\r\nimport styles from \"./Navbar.module.css\"\r\nimport {NavLink} from 'react-router-dom';\r\nimport {Friends} from \"../Friends/Friends\";\r\nimport {store} from \"../../redux/redux-store\";\r\n\r\n\r\ntype  NavbarPropsType = {\r\n    // state: SidebarType\r\n}\r\n\r\nexport const Navbar = (props: NavbarPropsType) => {\r\n    return (\r\n        <nav className={styles.nav}>\r\n            <div className={styles.menu}>\r\n                <div><NavLink activeClassName={styles.active} to=\"/profile\">Profile</NavLink></div>\r\n                <div><NavLink activeClassName={styles.active} to=\"/dialogs\">Dialogs</NavLink></div>\r\n                <div><a href=\"/#\">News</a></div>\r\n                <div><a href=\"/#\">Music</a></div>\r\n                <div><a href=\"/#\">News</a></div>\r\n            </div>\r\n            <div className={styles.friends}>\r\n                <Friends names={store.getState().sidebar.friends}/>\r\n            </div>\r\n            <div><NavLink className={styles.users} activeClassName={styles.active} to=\"/users\">Users</NavLink></div>\r\n\r\n        </nav>\r\n    );\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/neand.5e875fa6.png\";","import React, {useState} from 'react';\r\nimport styles from \"./Users.module.css\";\r\nimport {returntypeof} from \"react-redux-typescript\";\r\n\r\ntype  UsersNewPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    OnPageHandler: (pageNumber: number) => void\r\n    portionSize: number\r\n}\r\n\r\nexport const Paginator = ({\r\n                              totalUsersCount,\r\n                              pageSize,\r\n                              currentPage,\r\n                              OnPageHandler,\r\n                              portionSize = 10\r\n                          }: UsersNewPropsType) => {\r\n\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize)/* Math.ceil округляет число в большую сторону*/\r\n    let pages: Array<number> = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    const portionCount = Math.ceil(pagesCount / portionSize)\r\n    const [portionNumber, setPortionNumber] = useState<number>(1);\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    const rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    return (\r\n        <div className={styles.main}>\r\n            <div className={styles.pagination_wrapper}>\r\n                {portionNumber > 1 &&\r\n                <button onClick={() => {\r\n                    setPortionNumber(portionNumber - 1)\r\n                }}>PREV</button>}\r\n                {pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber).map((t) => {\r\n                    return <span key={t}\r\n                          className={currentPage === t ? styles.selectedPage : \"\"}\r\n                          onClick={() => {\r\n                              OnPageHandler(t)\r\n                          }}>{t}</span>})}\r\n                {portionCount>portionNumber &&\r\n                <button onClick={() => {\r\n                    setPortionNumber(portionNumber + 1)\r\n                }}>NEXT</button>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport styles from \"./Users.module.css\";\r\nimport image from \"../../img/neand.png\";\r\nimport {UsersType} from \"../../redux/users-reduсer\";\r\nimport {NavLink} from 'react-router-dom';\r\nimport {Paginator} from \"./Paginator\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype  UsersNewPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    setCurrentPage: (currentPage: number) => void\r\n    setUsers: (users: Array<UsersType>) => void\r\n    currentPage: number\r\n    users: Array<UsersType>\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    OnClickPageHandler: (pageNumber: number) => void\r\n    setFollowingInProgress: (userID: number, isFetching: boolean) => void\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nexport const Users = (props: UsersNewPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    return (\r\n        <div className={styles.main}>\r\n\r\n            <Paginator currentPage={props.currentPage}\r\n                       OnPageHandler={props.OnClickPageHandler}\r\n                       totalUsersCount={props.totalUsersCount} pageSize={props.pageSize}\r\n                       portionSize={10}\r\n            />\r\n\r\n            {props.users.map((u) => {\r\n                // const followHandler = () => {\r\n                //     dispatch(props.follow(u.id))\r\n                // }\r\n\r\n\r\n                return <div key={u.id}>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={\"/profile/\" + u.id}>\r\n                        <img className={styles.image}\r\n                             src={u.photos.small !== null ? u.photos.small : image}\r\n                             alt=\"\"/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div> {u.followed\r\n                        ?\r\n                        <button\r\n                            disabled={props.followingInProgress.some((t) => t === u.id)}\r\n                            onClick={() => {\r\n                                props.unfollow(u.id)\r\n                            }}>Unfollow</button>\r\n                        :\r\n                        <button\r\n                            disabled={props.followingInProgress.some((t) => t === u.id)}\r\n                            onClick={() => {\r\n                                props.follow(u.id)\r\n                            }}\r\n                        >Follow</button>}\r\n                    </div>\r\n                </span>\r\n                    <span>\r\n                    <span>\r\n                    <div>{u.name}</div>\r\n                        <div>{u.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"u.location.country\"}</div>\r\n                        <div>{\"u.location.city\"}</div>\r\n                    </span>\r\n                </span>\r\n                </div>\r\n            }\r\n            )\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\n","export default __webpack_public_path__ + \"static/media/3.b98a8c76.svg\";","import React from 'react';\r\nimport preloader from \"../../img/3.svg\";\r\nimport styles from\"./Preloader.module.css\"\r\n\r\nexport const Preloader =() => {\r\n return (\r\n        <div className={styles.main}>\r\n            <img  className={styles.img} alt={\"preloader\"} src={preloader}/>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateReduxType} from \"../redux/redux-store\";\r\n\r\n\r\ntype  MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: StateReduxType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: MapStateToPropsType) {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to=\"/login\"/>\r\n\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}\r\n\r\n","import {StateReduxType} from \"./redux-store\";\r\nimport {createSelector} from \"reselect\";\r\nimport {UsersType} from \"./users-reduсer\";\r\n\r\nexport const getUsers = (state: StateReduxType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsersSuper = createSelector(getUsers, (users: Array<UsersType>) => {\r\n    return users.map((user) => user)\r\n})\r\n\r\n// export const getUsersSuper = createSelector(getUsers, getPageSize (users: Array<UsersType>, pageSize: number) => {\r\n//     return users.map((user) => true)\r\n// })\r\n\r\n\r\nexport const getPageSize = (state: StateReduxType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: StateReduxType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: StateReduxType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: StateReduxType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingProgress = (state: StateReduxType) => {\r\n    return state.usersPage.followingProgress\r\n}\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow,\r\n    getUsersThunkCreator,\r\n    setCurrentPage,\r\n    setFollowingInProgress,\r\n    setUsers,\r\n    unfollow,\r\n    UsersType\r\n} from \"../../redux/users-reduсer\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../preloader/Preloader\";\r\nimport {WithAuthRedirect} from \"../../HOC/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {StateReduxType} from \"../../redux/redux-store\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsersSuper\r\n} from \"../../redux/users-selectors\";\r\n\r\n\r\ntype UsersPropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: []\r\n\r\n    setUsers: (users: Array<UsersType>) => void\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    // setPreloader: (isFetching: boolean) => void\r\n    setFollowingInProgress: (userID: number, isFetching: boolean) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\nclass UsersContainer extends React.Component <UsersPropsType, StateReduxType> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    OnClickPageHandler = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <Users\r\n                    totalUsersCount={this.props.totalUsersCount}\r\n                    pageSize={this.props.pageSize}\r\n                    setCurrentPage={this.props.setCurrentPage}\r\n                    setUsers={this.props.setUsers}\r\n                    currentPage={this.props.currentPage}\r\n                    users={this.props.users}\r\n                    follow={this.props.follow}\r\n                    unfollow={this.props.unfollow}\r\n                    OnClickPageHandler={this.OnClickPageHandler}\r\n                    setFollowingInProgress={this.props.setFollowingInProgress}\r\n                    followingInProgress={this.props.followingInProgress}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport const mapStateToProps = (state: StateReduxType) => {\r\n\r\n    return {\r\n        users: getUsersSuper(state),  /*отправляет стейт в компоненту*/\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingProgress(state)\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        setCurrentPage,\r\n        setUsers,\r\n        setFollowingInProgress,\r\n        getUsers: getUsersThunkCreator\r\n    }),\r\n    WithAuthRedirect\r\n)(UsersContainer)\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/mountain.ed14195c.jpg\";","import React, {ChangeEvent, KeyboardEvent, useEffect, useState} from 'react';\r\n\r\ntype  StatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\ntype  StatusStateType = {\r\n    status: string\r\n    editMode: boolean\r\n}\r\n\r\n\r\nexport const ProfileStatus = (props: StatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [status, setStatus] = useState<string>(props.status);\r\n\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const ofEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n\r\n    }\r\n\r\n\r\n    const onStatusKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            ofEditMode()\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode\r\n                ?\r\n                <div>\r\n                    <span onDoubleClick={onEditMode}>{props.status}</span>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <input onKeyPress={onStatusKeyPress} onChange={onStatusChange}\r\n                           autoFocus={true} onBlur={ofEditMode}\r\n                           value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\n","import styles from \"./ProfileInfo.module.css\";\r\nimport mountains from \"../../../img/mountain.jpg\";\r\nimport React from \"react\";\r\nimport {Preloader} from \"../../preloader/Preloader\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\n\r\ntype  ProfileInfoPropsType = {\r\n    profile: null | ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    if (!props.profile) {   /*как это влияет на отрисовку профиля?????*/\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n\r\n        <div>\r\n\r\n            <img className={styles.img} src={mountains} alt=\"\"/>\r\n            <h2>Name and Description</h2>\r\n            <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n            <img alt={\"some pic\"} src={props.profile.photos.large}/>\r\n            <div>About me: {props.profile.aboutMe}</div>\r\n            <div>If I search work: {props.profile.lookingForAJobDescription}</div>\r\n            <div>My real name is {props.profile.fullName}</div>\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/bird.5ea64365.jpg\";","import React from 'react';\r\nimport styles from \"./Post.module.css\"\r\nimport bird from \"../../../../img/bird.jpg\";\r\n\r\n\r\ntype  PostPropsType = {\r\n    message: string\r\n    likes: number\r\n}\r\n\r\nexport const Post = (props:PostPropsType) => {\r\n    return (\r\n        <div className={styles.post}>\r\n            <img className={styles.img} src={bird} alt=\"\"/>\r\n\r\n            <div className={styles.wrap}>\r\n                <div>{props.message} </div>\r\n                <div>Likes {props.likes}</div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n","export const required: any = (value: any) => {\r\n    return value ? undefined : \"Field is required\"\r\n}\r\n\r\n\r\n\r\n\r\nexport const maxLengthCreator  = (maxLength: number) => (value: any): any=> {\r\n    return value && value.length > maxLength ? `Max length is ${maxLength} symbols` : undefined\r\n\r\n\r\n}","import React from 'react';\r\nimport styles from \"./Textarea.module.css\"\r\nimport {WrappedFieldProps} from \"redux-form\";\r\n\r\nexport const Textarea = ({input, meta, ...props}: WrappedFieldProps) => {\r\n\r\n    return (\r\n        <div className={`${styles.formControl} ${meta.touched && meta.error ? styles.error : \"\"}`}>\r\n            <div><textarea {...input} {...props} /></div>\r\n            {meta.touched && meta.error && <span>{meta.error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport styles from \"./MyPosts.module.css\"\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostsType} from \"../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../FormsControls/Textarea\";\r\n\r\ntype  MyPostsPropsType = {\r\n    posts: Array<PostsType>\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\ntype  FormType = {\r\n    newPostText: string\r\n}\r\n\r\nlet maxLength = maxLengthCreator(15)\r\n\r\n\r\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n    const onAddPost = (values: FormType) => {\r\n        if (values) {\r\n            props.addPost(values.newPostText)\r\n        }\r\n    }\r\n    return (\r\n        <div className={styles.posts}>\r\n            <div className={styles.main}>\r\n                <h2>My Posts</h2>\r\n                <AddNewPostForm onSubmit={onAddPost}/>\r\n            </div>\r\n            {props.posts.map((t, index) => <Post key={index} message={t.message} likes={t.likesCount}/>)}\r\n        </div>\r\n    );\r\n});\r\n\r\nconst AddNewPost = (props: InjectedFormProps<FormType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={\"newPostText\"} component={Textarea} validate={[required, maxLength]} placeholder={\"Post message\"}/>\r\n            </div>\r\n            <button>Add post</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostForm = reduxForm<FormType>({form: \"ProfileAddNewPost\"})(AddNewPost)","import {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {addPostActionCreator} from '../../../redux/profile-reducer';\r\nimport {Dispatch} from \"redux\";\r\nimport {StateReduxType} from \"../../../redux/redux-store\";\r\n\r\n\r\nexport const mapStateToProps = (state: StateReduxType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        // newPostText: state.profilePage.newPostText\r\n\r\n    }\r\n}\r\nexport const mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n\r\n}\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)/*коннект имеет локальный субскрайб*/","import React from 'react';\r\nimport styles from \"./Profile.module.css\"\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\n\r\ntype  ProfilePropsType = {\r\n   // profilePage: ProfilePageType\r\n    // addPost: () => void\r\n    // updateNewPostText: (newText: string) => void\r\n    //dispatch: (action: ActionsType) => void\r\n    profile: null | ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\n\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n\r\n\r\n    return ( /*как оказался стор*/\r\n        <div className={styles.profile}>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport styles from \"./Profile.module.css\"\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from 'react-redux';\r\nimport {getStatus, getUserProfile, ProfileType, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {StateReduxType} from \"../../redux/redux-store\";\r\n\r\ntype  ProfileContainerPropsType = {\r\n    // setUserProfile: (profile: ProfileType) => void\r\n    profile: null | ProfileType\r\n    getUserProfile: (userID: string) => void\r\n    getStatus: (userID: string) => void\r\n    updateStatus: (status: string) => void\r\n    status: string\r\n}\r\ntype  PropsType = RouteComponentProps<PathType> & ProfileContainerPropsType  /*типизация пришедшего пути браузера*/\r\ntype  PathType = {\r\n    userId: string\r\n}\r\n\r\nclass ProfileContainer extends React.Component <PropsType, StateReduxType> {\r\n    componentDidMount() {   /*метод жизненного цикла, тут все запросы на сервер*/\r\n        let userID = this.props.match.params.userId\r\n        if (!userID) {\r\n            userID = \"19115\"\r\n            if (!userID) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userID)\r\n        this.props.getStatus(userID)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.profile}>\r\n                <Profile {...this.props} profile={this.props.profile} status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}/> {/*все пришедшие пропсы прокидываю дальше*/}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// let AuthRedirectComponent = WithAuthRedirect(ProfileContainer)\r\n\r\n\r\nlet mapStateToProps = (state: StateReduxType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status\r\n    }\r\n}\r\n\r\n\r\n// let ProfileWithUrl = withRouter(AuthRedirectComponent)\r\n// export default connect(mapStateToProps, {getUserProfile})(ProfileWithUrl)\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    // WithAuthRedirect\r\n)(ProfileContainer)","export default __webpack_public_path__ + \"static/media/dragon.5ce493a6.png\";","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport dragon from \"../../img/dragon.png\";\r\nimport styles from \"./Header.module.css\"\r\n\r\ntype  HeaderPropsType = {\r\n    // setUserData: (id: number, email: null | string, login: null | string) => void\r\n    isAuth: boolean\r\n    login: null | string\r\n    loginOut: () => void\r\n}\r\n\r\n\r\nexport const Header = (props: HeaderPropsType) => {\r\n    return (\r\n        <header className={styles.header}>\r\n            <img className={styles.img} src={dragon} alt=\"\"/>\r\n            <div className={styles.auth}>\r\n                {props.isAuth ? <div>{props.login} <button onClick={props.loginOut}>Log out</button></div> :\r\n                    <NavLink to=\"/login\">Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport {Header} from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {loginOut} from \"../../redux/auth-reduсer\";\r\nimport {StateReduxType} from \"../../redux/redux-store\";\r\n\r\ntype  HeaderContainerPropsType = {\r\n    // setUserData: (id: number, email: null | string, login: null | string) => void\r\n    isAuth: boolean\r\n    login: null | string\r\n\r\n    loginOut: any\r\n}\r\n\r\n\r\nclass HeaderContainer extends React.Component <HeaderContainerPropsType, StateReduxType> {\r\n\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: StateReduxType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {loginOut})(HeaderContainer)","import styles from \"./Textarea.module.css\";\r\nimport React from \"react\";\r\nimport {WrappedFieldProps} from \"redux-form\";\r\n\r\nexport const Input = ({input, meta, ...props}: WrappedFieldProps) => {\r\n\r\n    return (\r\n        <div className={`${styles.formControl} ${meta.touched && meta.error ? styles.error : \"\"}`}>\r\n            <div><input {...input} {...props} /></div>\r\n            {meta.touched && meta.error && <span>{meta.error}</span>}\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../FormsControls/Input\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {login} from \"../../redux/auth-reduсer\";\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {StateReduxType} from \"../../redux/redux-store\";\r\n\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n\r\n}\r\ntype MSTP = {\r\n    isAuth: boolean\r\n}\r\ntype MDTP = {\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\ntype LoginPropsType = MSTP & MDTP\r\n\r\nconst LoginForm = ({handleSubmit}: InjectedFormProps<FormDataType>) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><Field placeholder={\"Login\"} name={\"email\"} validate={[required]}\r\n                        component={Input}/></div>\r\n            <div><Field placeholder={\"Password\"} validate={[required]} type={\"password\"}\r\n                        name={\"password\"}\r\n                        component={Input}/></div>\r\n            <div><Field component={Input} name={\"rememberMe\"} type={\"checkbox\"}/>Remember\r\n                Me\r\n            </div>\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst LoginFormRedux = reduxForm<FormDataType>({\r\n    // a unique name for the form\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\nconst Login = ({login, isAuth}: LoginPropsType) => {       /*какие пропсы типизация*/\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginFormRedux onSubmit={onSubmit}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: StateReduxType): MSTP => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport default connect<MSTP, MDTP, {}, StateReduxType>(mapStateToProps, {login})(Login)","import React from 'react';\r\nimport styles from \"./Message.module.css\";\r\n\r\n\r\ntype  MessagePropsType = {\r\n    message: string\r\n\r\n}\r\n\r\nexport const Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={styles.message}>{props.message}</div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport styles from \"./DialogsItem.module.css\";\r\n\r\n\r\ntype  DialogsItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport const DialogsItem = (props: DialogsItemPropsType) => {\r\n    return (\r\n        <div className={styles.dialog}><NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink></div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport styles from \"./Dialogs.module.css\";\r\nimport {Message} from './Message/Message';\r\nimport {DialogsItem} from \"./DialogsItem/DialogsItem\";\r\nimport {DialogsPageType} from \"../../redux/dialogs-reduсer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../FormsControls/Textarea\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\n\r\ntype  DialogsPropsType = {\r\n    updateNewPostBody: (body: string) => void\r\n    sendMessage: (newMessageBody: string) => void\r\n    dialogsPage: DialogsPageType\r\n    isAuth: boolean\r\n}\r\n\r\n\r\ntype  FormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n\r\n\r\n    const addNewMessage = (formData: FormType) => {\r\n        props.sendMessage(formData.newMessageBody)\r\n    }\r\n\r\n    // if (!props.isAuth) {\r\n    //   return <Redirect to={\"/login\"}/>\r\n    // }\r\n\r\n\r\n    return (\r\n        <div className={styles.main}>\r\n            <div className={styles.dialogs}>\r\n                {props.dialogsPage.dialogs.map((t) => <DialogsItem name={t.name} id={t.id}\r\n                                                                   key={t.id}/>)}\r\n            </div>\r\n            <div className={styles.messages}>\r\n                <div> {props.dialogsPage.messages.map((t, index) => <Message message={t.message}\r\n                                                                             key={index}/>)}</div>\r\n                <AddMessageFormDialog onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nlet maxLength50 = maxLengthCreator(50)\r\n\r\nconst FormDialog = (props: InjectedFormProps<FormType>) => {\r\n\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} validate={[required, maxLength50]} name={\"newMessageBody\"} placeholder={\"Enter message\"}/>\r\n            </div>\r\n\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormDialog = reduxForm<FormType>({form: \"dialogAddMessageFormDialog\"})(FormDialog)\r\n","import {connect} from \"react-redux\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {SendMessageActionCreator} from \"../../redux/dialogs-reduсer\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport React from \"react\";\r\nimport {WithAuthRedirect} from \"../../HOC/withAuthRedirect\";\r\nimport {StateReduxType} from \"../../redux/redux-store\";\r\n\r\n\r\nexport const mapStateToProps = (state: StateReduxType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        // isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport const mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        // updateNewPostBody: (body: string) => {\r\n        //     dispatch(updateNewPostBodyActionCreator(body))\r\n        // },\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(SendMessageActionCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps), WithAuthRedirect)(Dialogs)\r\n\r\n// export const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent) /*получаем новую контейнерную компоненту*/","import React from 'react';\r\nimport './App.css';\r\n\r\nimport {Redirect, Route, Switch, withRouter} from 'react-router-dom';\r\nimport {Navbar} from './components/Navbar/Navbar';\r\nimport UsersContainer from './components/Users/UsersContainer';\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from \"./components/Login/Login\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/app-reduсer\";\r\nimport {StateReduxType} from \"./redux/redux-store\";\r\nimport {Preloader} from \"./components/preloader/Preloader\";\r\n\r\n\r\ntype AppPropsType = {\r\n    initializeApp: () => void\r\n    initialized: boolean\r\n}\r\n\r\nclass App extends React.Component<AppPropsType> {\r\n\r\n    componentDidMount() {   /*метод жизненного цикла, тут все зхапосы на сервер*/\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <HeaderContainer/>\r\n                {/*<Navbar state={props.store.sidebar}/>*/}\r\n                <Navbar/>\r\n                <div className={\"profile\"}>\r\n                    <Switch>\r\n                        <Route exact path=\"/\" render={() => <Redirect to=\"/profile\"/>}/>\r\n\r\n                        {/*<Route path=\"/dialogs\" render={() => <Dialogs  dispatch={props.dispatch} state={props.store.getState().dialogsPage}/>}/>*/}\r\n                        <Route path=\"/dialogs\" render={() => <DialogsContainer/>}/>\r\n                        {/*<Route path=\"/dialogs\" render={() => <Dialogs  dispatch={props.dispatch} state={props.store.dialogsPage}*/}\r\n                        <Route path=\"/profile/:userId?\"\r\n                               render={() =>\r\n                                   <ProfileContainer/>} /*пробрасываем диспатч вмеесто функцый*//>\r\n                        <Route path=\"/users\" render={() =>\r\n                            <UsersContainer/>} /*пробрасываем диспатч вмеесто функцый*//>\r\n                        <Route path=\"/login\" render={() =>\r\n                            <Login/>} /*пробрасываем диспатч вмеесто функцый*//>\r\n                    </Switch>\r\n                    {/*<Dialogs/>*/}\r\n                    {/*<Profile/>*/}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: StateReduxType): MapStateToPropsType => {\r\n    return {\r\n        initialized: state.appReducer.initialized\r\n    }\r\n}\r\n\r\n\r\ntype  MapStateToPropsType = {\r\n    initialized: boolean\r\n}\r\ntype  MapDispatchToProps = {\r\n    initializeApp: () => void\r\n}\r\n\r\ntype  OwnProps = {}\r\n\r\nexport default compose<React.ComponentType>(withRouter, connect<MapStateToPropsType, MapDispatchToProps, OwnProps, StateReduxType>(mapStateToProps, {initializeApp}))(App)\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport './index.css';\r\nimport {store} from \"./redux/redux-store\";\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\r\nimport {Provider} from 'react-redux';\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\n\r\n// let RerenderEntireTree = () => {  /*Функция для перерисовки*/\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>{/*позволяет стор  засунуть в контектс*/}\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n// RerenderEntireTree()/*Функция для перерисовки, вызывается для первой отрисовки*/\r\n\r\n// store.subscribe(() => {\r\n//         // let state = store.getState()\r\n//         RerenderEntireTree()\r\n//     }\r\n// )/* функция которая закидывает ререндер в стейт файл*/\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Friends_main__1XAM0\",\"row\":\"Friends_row__35Bt8\",\"item\":\"Friends_item__1Uooj\",\"images\":\"Friends_images__2gbUq\",\"name\":\"Friends_name__33fB7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2i0I_\",\"menu\":\"Navbar_menu__3b9Ky\",\"active\":\"Navbar_active__2kMfW\",\"users\":\"Navbar_users__ruFIE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Users_main__pqh2t\",\"image\":\"Users_image__10RV9\",\"pagination_wrapper\":\"Users_pagination_wrapper__2wLc9\",\"selectedPage\":\"Users_selectedPage__ohqD6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"Textarea_formControl__50Apl\",\"error\":\"Textarea_error__2O4Pd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__2LSn5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__3wUTQ\",\"wrap\":\"Post_wrap__bSfXB\",\"img\":\"Post_img__2LJI8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"Header_img__214aN\",\"header\":\"Header_header__2xpWK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Dialogs_main__2UXer\",\"dialogs\":\"Dialogs_dialogs__luw1S\",\"dialog\":\"Dialogs_dialog__19LfF\",\"active\":\"Dialogs_active__3Kcdw\",\"message\":\"Dialogs_message__2luxZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Preloader_main__1a-af\",\"img\":\"Preloader_img__2tHPs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__TOD2P\",\"main\":\"MyPosts_main__2ptLK\"};"],"sourceRoot":""}