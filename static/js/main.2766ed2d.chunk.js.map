{"version":3,"sources":["redux/dialogs-reduсer.ts","HOC/withAuthRedirect.tsx","components/FormsControls/Textarea.tsx","components/Users/Users.module.css","Api/Api.ts","redux/profile-reducer.ts","redux/sidebar-reducer.ts","redux/users-reduсer.ts","redux/auth-reduсer.ts","redux/app-reduсer.ts","redux/redux-store.ts","components/Friends/Friend/Friend.tsx","components/Friends/Friends.tsx","components/Navbar/Navbar.tsx","img/neand.png","components/Users/Paginator.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","img/3.svg","components/preloader/Preloader.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","img/mountain.jpg","components/Profile/ProfileInfo/ProfileStatus.tsx","img/img.png","components/Profile/ProfileInfo/ProfileInfo.tsx","img/bird.jpg","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","img/dragon.png","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/FormsControls/Input.tsx","components/Login/Login.tsx","components/News/News.tsx","components/Music/Music.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/Navbar/Navbar.module.css","components/Friends/Friends.module.css","utils/validators/validators.ts","components/FormsControls/Textarea.module.css","components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Header/Header.module.css","components/preloader/Preloader.module.css","components/Profile/MyPosts/MyPosts.module.css"],"names":["SendMessageActionCreator","newMessageBody","type","initialState","dialogs","id","name","messages","message","dialogsReducer","state","action","stateCopy","body","push","mapStateToPropsForRedirect","isAuth","auth","WithAuthRedirect","Component","connect","props","restProps","to","Textarea","input","meta","className","styles","formControl","touched","error","module","exports","instance","axios","create","withCredentials","baseURL","headers","userAPI","currentPage","pageSize","term","friend","get","then","response","data","userID","post","delete","profileAPI","getProfile","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","authAPI","email","password","rememberMe","captcha","securityAPI","posts","likesCount","profile","setStatus","friends","users","totalUsersCount","isFetching","followingProgress","filter","followSuccess","unFollowSuccess","setUsers","setFilter","payload","setCurrentPage","setPreloader","setFollowingInProgress","login","captchaURL","setUserData","setCaptchaURL","getAuthUserData","dispatch","a","resultCode","getCaptcha","res","url","console","log","initialized","reducers","combineReducers","dialogsPage","profilePage","newPostText","sidebar","usersPage","map","u","followed","totalCount","t","form","formReducer","appReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Friend","item","images","image","src","alt","Friends","main","row","names","index","Navbar","nav","menu","activeClassName","active","getState","Paginator","OnPageHandler","portionSize","pagesCount","Math","ceil","pages","i","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pagination_wrapper","onClick","p","selectedPage","UsersSearchForm","React","memo","initialValues","validate","values","onSubmit","setSubmitting","OnFilterHandler","isSubmitting","as","value","disabled","Users","useDispatch","OnClickPageHandler","photos","small","follow","followingInProgress","some","unfollow","wrap","desc","Preloader","img","preloader","getUsersSuper","createSelector","user","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingProgress","getUserFilter","UsersContainer","pageNumber","getUsers","this","items","ProfileStatus","editMode","setEditMode","useEffect","ofEditMode","onKeyPress","e","charCode","onChange","currentTarget","autoFocus","onBlur","onDoubleClick","ProfileInfo","mountains","profile__wrapper","large","userPhoto","isOwner","target","files","length","aboutMe","lookingForAJob","fullName","toUpperCase","slice","Post","bird","likes","maxLength","maxLengthCreator","MyPosts","AddNewPostForm","addPost","reduxForm","handleSubmit","Field","component","required","placeholder","MyPostsContainer","addPostActionCreator","Profile","ProfileContainer","match","params","userId","history","getUserProfile","refreshProfile","prevProps","prevState","snapshot","file","withRouter","Header","header","dragon","loginOut","HeaderContainer","Input","LoginFormRedux","News","title","Music","DialogsContainer","lazy","App","initializeApp","exact","path","render","fallback","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","undefined"],"mappings":"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","file":"static/js/main.2766ed2d.chunk.js","sourcesContent":["import {DialogsType, MessagesType} from \"./store\";\r\n\r\n\r\nexport type  DialogsPageType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n\r\n}\r\n\r\n\r\nexport type  SendMessageActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"SEND-MESSAGE\"\r\n    newMessageBody:string\r\n}\r\n\r\n\r\n// export const updateNewPostBodyActionCreator = (body: string): UpdateNewPostBodyActionType => {\r\n//     return {\r\n//         type: \"UPDATE-NEW-POST-BODY\",\r\n//         body: body\r\n//     }\r\n// }\r\n\r\nexport const SendMessageActionCreator = (newMessageBody:string): SendMessageActionType => {\r\n    return {\r\n        type: \"SEND-MESSAGE\",\r\n        newMessageBody\r\n    }\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Ivan\"},\r\n        {id: 2, name: \"Oleg\"},\r\n        {id: 3, name: \"Misha\"},\r\n        {id: 4, name: \"Petr\"},\r\n        {id: 5, name: \"Alex\"},\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Privet\"},\r\n        {id: 2, message: \"How are you\"},\r\n        {id: 3, message: \"Lets we meet\"},\r\n        {id: 4, message: \"No\"},\r\n    ],\r\n   }\r\n\r\n\r\nexport const dialogsReducer = (state: DialogsPageType = initialState, action: SendMessageActionType) => {\r\n    switch (action.type) {\r\n        // case \"UPDATE-NEW-POST-BODY\": {\r\n        //     let stateCopy = {...state} /*делается копия для правильного изменения стейта*/\r\n        //     action.newMessageBody = action.body /* была параметр ф, а теперь мы берем его из экшена*/\r\n        //     return stateCopy\r\n        // }\r\n        case \"SEND-MESSAGE\": {\r\n            let stateCopy = {...state, messages: [...state.messages]}/* делается глубокая копия стейта и мессаджес в стейте*/\r\n            let body = action.newMessageBody/* была параметр ф, а теперь мы берем его из экшена*/\r\n\r\n\r\n            stateCopy.messages.push({id: 5, message: body})\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateReduxType} from \"../redux/redux-store\";\r\n\r\n\r\ntype  MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: StateReduxType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: MapStateToPropsType) {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to=\"/login\"/>\r\n\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}\r\n\r\n","import React from 'react';\r\nimport styles from \"./Textarea.module.css\"\r\nimport {WrappedFieldProps} from \"redux-form\";\r\n\r\nexport const Textarea = ({input, meta, ...props}: WrappedFieldProps) => {\r\n\r\n    return (\r\n        <div className={`${styles.formControl} ${meta.touched && meta.error ? styles.error : \"\"}`}>\r\n            <div><textarea {...input} {...props} /></div>\r\n            {meta.touched && meta.error && <span>{meta.error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Users_main__pqh2t\",\"image\":\"Users_image__10RV9\",\"pagination_wrapper\":\"Users_pagination_wrapper__2wLc9\",\"selectedPage\":\"Users_selectedPage__ohqD6\",\"desc\":\"Users_desc__3xwRZ\",\"name\":\"Users_name__2HBzu\",\"wrap\":\"Users_wrap__KN6ow\",\"follow\":\"Users_follow__2ZzmM\",\"item\":\"Users_item__3-SSA\"};","import axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        \"API-KEY\": \"7c38f700-eae7-4224-81a9-9392ebf67fbb\"\r\n    }\r\n})\r\n\r\n\r\nexport const userAPI = {\r\n    getUsers(currentPage: number, pageSize: number, term: string = \"\", friend: null | boolean = null) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? \"\" : `&friend=${friend}`))  /*приклеиваем сюда baseURL и продолжение адерса*/\r\n            .then(response => response.data) /*уменьшаем получаемый респонс*/\r\n    },\r\n    follow(userID: number) {\r\n        return instance.post(`follow/${userID}`)\r\n    },\r\n    unfollow(userID: number) {\r\n        return instance.delete(`follow/${userID}`)\r\n    },\r\n    getProfile(userID: string) {\r\n        return profileAPI.getProfile(userID)\r\n    }\r\n}\r\n\r\n\r\nexport const profileAPI = {\r\n\r\n    getProfile(userID: string) {\r\n        return instance.get(`profile/` + userID)\r\n    },\r\n    getStatus(userID: string) {\r\n        return instance.get(`profile/status/` + userID)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status/`, {status})\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData()\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put(`profile/photo/`, formData, {\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: string) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe, captcha})\r\n    },\r\n    loginOut() {\r\n        return instance.delete(`auth/login`)\r\n    },\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptcha() {\r\n        return instance.get(`security/get-captcha-url`)\r\n    },\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {profileAPI, userAPI} from \"../Api/Api\";\r\n\r\n\r\nexport  type  PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\n\r\nexport type ProfileType = {\r\n    photos: PhotosType\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n}\r\ntype PhotosType = {\r\n    'small': string\r\n    'large': string\r\n}\r\ntype  ContactsType = {\r\n    facebook: string\r\n    website: null\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: null\r\n    github: string\r\n    mainLink: null\r\n}\r\n\r\n\r\nexport type  ProfilePageType = {\r\n    status: string;\r\n    posts: Array<PostsType>\r\n    profile: null | ProfileType\r\n}\r\n\r\nexport type  AddPostActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"PROFILE/ADD-POST\"\r\n    newPostText: string\r\n}\r\n\r\nexport type DeletePostActionType = ReturnType<typeof deletePostActionCreator>\r\n\r\n\r\n// export type  UpdateNewPostActionType = { /*необходимо для типизации диспатчка*/\r\n//     type: \"UPDATE-NEW-POST-TEXT\"\r\n//     newText: string\r\n// }\r\n\r\n\r\nexport type  SetUserProfileActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"PROFILE/SET-USER-PROFILE\"\r\n    profile: null | ProfileType\r\n\r\n}\r\n\r\nexport type  setStatusActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"PROFILE/SET-STATUS\"\r\n    status: string\r\n\r\n}\r\n\r\nexport type SetPhotoSuccessActionType = ReturnType<typeof savePhotoSuccess>\r\n\r\n\r\nexport type  ActionsType =\r\n    AddPostActionType\r\n    | SetUserProfileActionType\r\n    | setStatusActionType\r\n    | DeletePostActionType\r\n    | SetPhotoSuccessActionType\r\n\r\n\r\n/*Создаем инициализационный стейт для profileReducer*/\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hello\", likesCount: 8},\r\n        {id: 2, message: \"How are you?\", likesCount: 15},\r\n        {id: 3, message: \"Where are you?\", likesCount: 50},\r\n    ],\r\n    profile: null,\r\n    status: \"\"\r\n}\r\n\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: ActionsType): ProfilePageType => { /*указываем стейту инициализационное значение*/\r\n    switch (action.type) {\r\n        case \"PROFILE/SET-STATUS\": {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case \"PROFILE/ADD-POST\": {\r\n            // let newPost: PostsType = {\r\n            //     id: 5,\r\n            //     message: state.newPostText,\r\n            //     likesCount: 0\r\n            // }\r\n            return {\r\n                ...state,\r\n                posts: [{\r\n                    id: 5,\r\n                    message: action.newPostText,\r\n                    likesCount: 0\r\n                }, ...state.posts],\r\n            } /*делается копия для правильного изменения стейта*/\r\n\r\n            // stateCopy.posts.unshift(newPost) /*стейт тут приходит в пропсах это this._state.profilePage*/\r\n            // stateCopy.newPostText = \"\"\r\n            // return stateCopy\r\n            // break; /*брейк можно заменить ретурн стейт в каждом кейсе*/\r\n        }\r\n        case \"PROFILE/SET-USER-PROFILE\": {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case \"PROFILE/DELETE-POST\": {\r\n            return {...state, posts: state.posts.filter((post) => post.id != action.id)}\r\n        }\r\n        case \"PROFILE/SET-PHOTO\": {\r\n            return {...state, profile: state.profile ? {...state.profile} : null}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const addPostActionCreator = (newPostText: string): AddPostActionType => {\r\n    return {\r\n        type: \"PROFILE/ADD-POST\",\r\n        newPostText\r\n    }\r\n}\r\n\r\nexport const deletePostActionCreator = (id: number) => {\r\n    return {\r\n        type: \"PROFILE/DELETE-POST\",\r\n        id\r\n    } as const\r\n}\r\n\r\n\r\n/*ф. возвращающая экшен, ее вызывают в компоненте в диспатче\r\nи прокидывают в параметрах данные сюда. АК экспорт. его не надо прокидывать пропсами props.dispatch (updateNewPostActionCreator(text)) */\r\n\r\nexport const setUserProfile = (profile: null | ProfileType): SetUserProfileActionType => {\r\n    return {\r\n        type: \"PROFILE/SET-USER-PROFILE\",\r\n        profile\r\n    }\r\n}\r\n\r\nexport const setStatus = (status: string): setStatusActionType => {\r\n    return {\r\n        type: \"PROFILE/SET-STATUS\",\r\n        status\r\n    }\r\n}\r\n\r\nexport const savePhotoSuccess = (photos: PhotosType) => {\r\n    return {\r\n        type: \"PROFILE/SET-PHOTO\",\r\n        photos\r\n    } as const\r\n}\r\n\r\n\r\nexport const getUserProfile = (userID: string) => async (dispatch: Dispatch) => {\r\n    const response = await userAPI.getProfile(userID)\r\n    dispatch(setUserProfile(response.data))/*отправляем полученные данные в стейт*/\r\n}\r\n\r\n\r\nexport const getStatus = (userID: string) => async (dispatch: Dispatch) => {\r\n    const response = await profileAPI.getStatus(userID)\r\n    dispatch(setStatus(response.data))/*отправляем полученные данные в стейт*/\r\n}\r\n\r\nexport const updateStatus = (status: string) => async (dispatch: Dispatch) => {\r\n    const response = await profileAPI.updateStatus(status)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status))/*отправляем полученные данные в стейт*/\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: File) => async (dispatch: Dispatch) => {\r\n    const response = await profileAPI.savePhoto(file)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(savePhotoSuccess(response.data.photos))\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {SidebarType} from \"./store\";\r\n\r\n\r\nlet initialState = {\r\n    friends: [\r\n        {name: \"Ivan\"},\r\n        {name: \"Oleg\"},\r\n        {name: \"Petr\"},\r\n        {name: \"Vasa\"},\r\n        {name: \"Sergei\"},\r\n        {name: \"Margo\"}\r\n    ]\r\n}\r\n\r\n\r\nexport const sidebarReducer = (state: SidebarType = initialState, action: any) => {\r\n\r\n    return state\r\n}","import {Dispatch} from \"redux\";\r\nimport {userAPI} from \"../Api/Api\";\r\n\r\nexport type  FollowActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"USERS/FOLLOW\"\r\n    userID: number\r\n}\r\n\r\nexport type  UnFollowActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"USERS/UNFOLLOW\"\r\n    userID: number\r\n}\r\n\r\nexport type  SetUsersActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"USERS/SET-USERS\"\r\n    users: Array<UsersType>\r\n}\r\n\r\nexport type  SetCurrentPageActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"USERS/SET-CURRENT-PAGE\"\r\n    currentPage: number\r\n}\r\n\r\nexport type  SetUsersTotalCountActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"USERS/SET-CURRENT-TOTAL-COUNT\"\r\n    totalCount: number\r\n}\r\n\r\nexport type  SetPreloaderActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"USERS/SET-PRELOADER\"\r\n    isFetching: boolean\r\n}\r\nexport type  FollowingInProgressActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"USERS/FOLLOWING-IN-PROGRESS\"\r\n    userID: number\r\n    isFetching: boolean\r\n}\r\n\r\nexport type  SetFiltersActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"USERS/SET-FILTER\"\r\n    payload: {\r\n        term: string,\r\n        friend: null | boolean\r\n    }\r\n}\r\n\r\n\r\n////\r\n\r\n\r\nexport type  UsersMainType = {  /*типизация стейта локального*/\r\n    users: Array<UsersType>\r\n    pageSize: number,\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingProgress: number[],\r\n    filter: {\r\n        term: string,\r\n        friend: null | boolean\r\n    }\r\n}\r\n\r\nexport type  UsersType = {\r\n    id: number\r\n    photos: PhotosType\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: LocationType\r\n}\r\n\r\nexport type  PhotosType = {\r\n    small: null | string\r\n    large: null | string\r\n\r\n}\r\n\r\ntype  LocationType = {\r\n    city: string\r\n    country: string\r\n}\r\n\r\n\r\nexport type  ActionType =\r\n    FollowActionType\r\n    | UnFollowActionType\r\n    | SetUsersActionType\r\n    | SetCurrentPageActionType\r\n    | SetUsersTotalCountActionType\r\n    | SetPreloaderActionType\r\n    | FollowingInProgressActionType\r\n    | SetFiltersActionType\r\n\r\n\r\nlet initialState: UsersMainType = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingProgress: [],\r\n    filter: {\r\n        term: \"\",\r\n        friend: null\r\n    }\r\n}\r\n\r\n\r\nexport type FilterType = typeof initialState.filter\r\n\r\n\r\nexport const usersReducer = (state: UsersMainType = initialState, action: ActionType): UsersMainType => {\r\n    switch (action.type) {\r\n        case \"USERS/FOLLOW\": {\r\n            return {\r\n                ...state,\r\n                users: state.users.map((u) => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        }\r\n\r\n        case \"USERS/UNFOLLOW\": {\r\n            return {\r\n                ...state,\r\n                users: state.users.map((u) => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        }\r\n        case \"USERS/SET-USERS\": {\r\n            return {...state, users: action.users}\r\n        }\r\n        case \"USERS/SET-CURRENT-PAGE\": {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case \"USERS/SET-CURRENT-TOTAL-COUNT\": {\r\n            return {...state, totalUsersCount: action.totalCount}\r\n        }\r\n        case \"USERS/SET-PRELOADER\": {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case \"USERS/FOLLOWING-IN-PROGRESS\": {\r\n            return {\r\n                ...state,\r\n                followingProgress: action.isFetching\r\n                    ? [...state.followingProgress, action.userID]\r\n                    : state.followingProgress.filter((t) => t !== action.userID)\r\n\r\n            }\r\n        }\r\n        case \"USERS/SET-FILTER\": {\r\n            return {...state, filter: action.payload}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n/*Это экшен криэйторы у которых в названии в конце убрали букву AC*/\r\n\r\n\r\nexport const followSuccess = (userID: number): FollowActionType => {\r\n    return {\r\n        type: \"USERS/FOLLOW\",\r\n        userID: userID\r\n    }\r\n}\r\nexport const unFollowSuccess = (userID: number): UnFollowActionType => {\r\n    return {\r\n        type: \"USERS/UNFOLLOW\",\r\n        userID: userID\r\n    }\r\n}\r\nexport const setUsers = (users: Array<UsersType>): SetUsersActionType => {\r\n    return {\r\n        type: \"USERS/SET-USERS\",\r\n        users: users\r\n    }\r\n}\r\nexport const setFilter = (filter: FilterType): SetFiltersActionType => {\r\n    return {\r\n        type: \"USERS/SET-FILTER\",\r\n        payload: filter\r\n    }\r\n}\r\n\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageActionType => {\r\n    return {\r\n        type: \"USERS/SET-CURRENT-PAGE\",\r\n        currentPage: currentPage\r\n    }\r\n}\r\n\r\n\r\nexport const setTotalUsersCount = (totalCount: number): SetUsersTotalCountActionType => {\r\n    return {\r\n        type: \"USERS/SET-CURRENT-TOTAL-COUNT\",\r\n        totalCount: totalCount\r\n    }\r\n}\r\nexport const setPreloader = (isFetching: boolean): SetPreloaderActionType => {\r\n    return {\r\n        type: \"USERS/SET-PRELOADER\",\r\n        isFetching: isFetching\r\n    }\r\n}\r\nexport const setFollowingInProgress = (userID: number, isFetching: boolean): FollowingInProgressActionType => {\r\n    return {\r\n        type: \"USERS/FOLLOWING-IN-PROGRESS\",\r\n        userID: userID,\r\n        isFetching: isFetching\r\n    }\r\n}\r\n\r\n\r\n/*санки*/\r\n\r\nexport const getUsersThunkCreator = (currentPage: number, pageSize: number, filter: FilterType) => async (dispatch: Dispatch) => {  /*это санка*/\r\n\r\n    dispatch(setPreloader(true))\r\n    dispatch(setCurrentPage(currentPage))\r\n    dispatch(setFilter(filter))\r\n    const data = await userAPI.getUsers(currentPage, pageSize, filter.term, filter.friend)\r\n    dispatch(setPreloader(false))\r\n    dispatch(setUsers(data.items))\r\n    dispatch(setTotalUsersCount(data.totalCount))\r\n}\r\n\r\n\r\nexport const follow = (userID: number) => { /*это криэйтор санки*/\r\n    return async (dispatch: Dispatch) => {   /*это санка*/\r\n        dispatch(setFollowingInProgress(userID, true))\r\n        const response = await userAPI.follow(userID)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(followSuccess(userID))\r\n        }\r\n        dispatch(setFollowingInProgress(userID, false))\r\n    }\r\n}\r\n\r\nexport const unfollow = (userID: number) => { /*это криэйтор санки*/\r\n    return async (dispatch: Dispatch) => {   /*это санка*/\r\n        dispatch(setFollowingInProgress(userID, true))\r\n        const response = await userAPI.unfollow(userID)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(unFollowSuccess(userID))\r\n        }\r\n        dispatch(setFollowingInProgress(userID, false))\r\n    }\r\n}\r\n\r\n\r\n","import {authAPI, securityAPI} from \"../Api/Api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppThunk, StateReduxType} from \"./redux-store\";\r\nimport {FormAction} from \"redux-form\";\r\n\r\n\r\nexport type  AuthMainType = {  /*типизация стейта локального*/\r\n    id: null | number\r\n    email: null | string\r\n    login: null | string\r\n    isAuth: boolean\r\n    captchaURL: null | string\r\n}\r\n\r\nlet initialState: AuthMainType = {\r\n    id: 2,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaURL: null,\r\n}\r\n\r\n\r\nexport const authReducer = (state = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case \"AUTH/SET-USER-DATA\": {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        case \"AUTH/SET-CAPTCHA-URL\": {\r\n            return {...state, ...action.payload}\r\n\r\n            // return {...state, captchaURL: action.payload.captcha}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type  AuthMainActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"AUTH/SET-USER-DATA\"\r\n    payload: {\r\n        id: null | number\r\n        email: null | string\r\n        login: null | string\r\n        isAuth: boolean\r\n    }\r\n}\r\nexport type SetCaptchaURLActionType = ReturnType<typeof setCaptchaURL>\r\n\r\n\r\nexport type  ActionType = AuthMainActionType | SetCaptchaURLActionType\r\n\r\n\r\nexport const setUserData = (id: number | null, email: null | string, login: null | string, isAuth: boolean): AuthMainActionType => {\r\n    return {\r\n        type: \"AUTH/SET-USER-DATA\",\r\n        payload: {\r\n            id,\r\n            email,\r\n            login,\r\n            isAuth\r\n        }\r\n    }\r\n}\r\n\r\nexport const setCaptchaURL = (captchaURL: null | string) => {\r\n    return {\r\n        type: \"AUTH/SET-CAPTCHA-URL\",\r\n        payload: {\r\n            captchaURL\r\n        }\r\n    } as const\r\n}\r\n\r\n\r\n// thunk\r\nexport const getAuthUserData = (): AppThunk => async (dispatch) => {\r\n    let response = await authAPI.me()\r\n\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data\r\n        dispatch(setUserData(id, email, login, true))\r\n    } /*отправляем полученные данные в стейт*/\r\n\r\n}\r\n\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkAction<void, StateReduxType, unknown, ActionType | FormAction> => async (dispatch) => {\r\n\r\n    let response = await authAPI.login(email, password, rememberMe, captcha)\r\n    console.log(\"ee\" + response.data.resultCode);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData())\r\n    }\r\n    if (response.data.resultCode === 10) {\r\n        dispatch(getCaptcha())\r\n    }\r\n}\r\n\r\n\r\nexport const getCaptcha = (): AppThunk => async (dispatch) => {\r\n    try {\r\n        const res = await securityAPI.getCaptcha()\r\n        const captchaURL = res.data.url\r\n        console.log(res.data.url);\r\n        dispatch(setCaptchaURL(captchaURL))\r\n    } catch (e) {\r\n        console.log(e)\r\n    } finally {\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const loginOut = () => (dispatch: Dispatch) => {\r\n\r\n    authAPI.loginOut()  /*чтобы прееделать в асинк пишем после стрелки async тут делаем переменную и await убираем зен*/\r\n        .then((response) => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setUserData(null, null, null, false))\r\n            }\r\n        })\r\n\r\n}\r\n\r\n","import {getAuthUserData} from \"./auth-reduсer\";\r\nimport {AppThunk} from \"./redux-store\";\r\n\r\nexport type  initializedActionType = {\r\n    type: \"INITIALIZED-SUCCESSES\"\r\n}\r\n//\r\n\r\n\r\nexport type  AuthMainType = {  /*типизация стейта локального*/\r\n    initialized: boolean,\r\n}\r\n\r\n\r\nexport type  ActionType = initializedActionType\r\n\r\n\r\nlet initialState: AuthMainType = {\r\n    initialized: false,\r\n}\r\n\r\n\r\nexport const appReducer = (state: AuthMainType = initialState, action: ActionType): AuthMainType => {\r\n    switch (action.type) {\r\n\r\n        case \"INITIALIZED-SUCCESSES\": {\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const initializedSuccess = (): initializedActionType => {\r\n    return {\r\n        type: \"INITIALIZED-SUCCESSES\",\r\n    }\r\n}\r\n\r\nexport const initializeApp = (): AppThunk => async (dispatch) => {\r\n    await dispatch(getAuthUserData())\r\n    dispatch(initializedSuccess())\r\n}\r\n\r\n//\r\n// export const login = (email: string, password: string, rememberMe: boolean): ThunkAction<void, StateReduxType, unknown, ActionType | FormAction> => (dispatch) => {\r\n//\r\n//     authAPI.login(email, password, rememberMe)\r\n//         .then((response) => {\r\n//             if (response.data.resultCode === 0) {\r\n//                 dispatch(getAuthUserData())\r\n//             }\r\n//         })\r\n//\r\n// }\r\n//\r\n//\r\n// export const loginOut = () => (dispatch: Dispatch) => {\r\n//\r\n//     authAPI.loginOut()\r\n//         .then((response) => {\r\n//             if (response.data.resultCode === 0) {\r\n//                 dispatch(setUserData(null, null, null, false))\r\n//             }\r\n//         })\r\n//\r\n// }\r\n\r\n","import {\r\n    AnyAction,\r\n    applyMiddleware,\r\n    combineReducers,\r\n    compose,\r\n    createStore,\r\n    Store\r\n} from \"redux\";\r\nimport {dialogsReducer} from \"./dialogs-reduсer\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {sidebarReducer} from \"./sidebar-reducer\";\r\nimport {usersReducer} from \"./users-reduсer\";\r\nimport {authReducer} from \"./auth-reduсer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {appReducer} from \"./app-reduсer\";\r\n\r\n\r\nlet reducers = combineReducers({ /*создается общий редьюсер с помощью спец команды, внутрь котор вставляют редюсеры имеющиеся*/\r\n    dialogsPage: dialogsReducer,  /*ключ это элем общий из стейта, значя относящийся к нему релдьюсер*/\r\n    profilePage: profileReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    appReducer: appReducer\r\n})\r\n\r\n// const composeEnhancers = window['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__'] as typeof compose || compose;\r\nconst composeEnhancers = (window && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store: Store<StateReduxType> = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n\r\nexport type StateReduxType = ReturnType<typeof reducers>/*скопировал из впервой версии*/\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, StateReduxType, unknown, AnyAction>\r\n\r\n// export let store: Store<StateReduxType> = createStore(reducers) /*это шаблон создания стора*/\r\n// export let store: Store<StateReduxType> = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n// export let store: any = createStore(reducers) /*это шаблон создания стора help*/\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport styles from \"./../Friends.module.css\";\r\n\r\n\r\ntype  FriendPropsType = {\r\n    name:string\r\n\r\n}\r\n\r\n\r\nexport const Friend = (props:FriendPropsType) => {\r\n    return (\r\n        <div className={styles.item}>\r\n            <div className={styles.images}>\r\n                <img className={styles.image} src=\"https://www.film.ru/sites/default/files/news/44976246-1097247.jpg\" alt=\"\"/>\r\n            </div>\r\n            <div className={styles.name}>\r\n                <span>{props.name}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport {FriendsType} from \"../../redux/store\";\r\nimport {Friend} from \"./Friend/Friend\";\r\nimport styles from \"./Friends.module.css\";\r\n\r\n\r\ntype  FriendsPropsType = {\r\n    names: Array<FriendsType>\r\n}\r\n\r\nexport const Friends = (props: FriendsPropsType) => {\r\n    return (\r\n        <div className={styles.main}>\r\n            <h3>Best Friends</h3>\r\n            <div className={styles.row}>\r\n                {props.names.map((t, index) => <Friend name={t.name} key={index}/>)}\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\n\r\nimport styles from \"./Navbar.module.css\"\r\nimport {NavLink} from 'react-router-dom';\r\nimport {Friends} from \"../Friends/Friends\";\r\nimport {store} from \"../../redux/redux-store\";\r\n\r\n\r\ntype  NavbarPropsType = {\r\n    // state: SidebarType\r\n}\r\n\r\nexport const Navbar = (props: NavbarPropsType) => {\r\n    return (\r\n        <nav className={styles.nav}>\r\n            <div className={styles.menu}>\r\n                <div><NavLink activeClassName={styles.active} to=\"/profile\">Profile</NavLink></div>\r\n                <div><NavLink activeClassName={styles.active} to=\"/dialogs\">Dialogs</NavLink></div>\r\n                <div><NavLink activeClassName={styles.active} to=\"/news\">News</NavLink></div>\r\n                <div><NavLink activeClassName={styles.active} to=\"/music\">Music</NavLink></div>\r\n\r\n            </div>\r\n            <div className={styles.friends}>\r\n                <Friends names={store.getState().sidebar.friends}/>\r\n            </div>\r\n            <div><NavLink className={styles.users} activeClassName={styles.active} to=\"/users\">Users</NavLink></div>\r\n\r\n        </nav>\r\n    );\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/neand.5e875fa6.png\";","import React, {useState} from 'react';\r\nimport styles from \"./Users.module.css\";\r\nimport {returntypeof} from \"react-redux-typescript\";\r\n\r\ntype  UsersNewPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    OnPageHandler: (pageNumber: number) => void\r\n    portionSize: number\r\n}\r\n\r\nexport const Paginator = ({\r\n                              totalUsersCount,\r\n                              pageSize,\r\n                              currentPage,\r\n                              OnPageHandler,\r\n                              portionSize = 10\r\n                          }: UsersNewPropsType) => {\r\n\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize)/* Math.ceil округляет число в большую сторону*/\r\n    let pages: Array<number> = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    const portionCount = Math.ceil(pagesCount / portionSize)\r\n    const [portionNumber, setPortionNumber] = useState<number>(1);\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    const rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    return (\r\n        <div className={styles.main}>\r\n            <div className={styles.pagination_wrapper}>\r\n                {portionNumber > 1 &&\r\n                <button onClick={() => {\r\n                    setPortionNumber(portionNumber - 1)\r\n                }}>PREV</button>}\r\n                {pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber).map((t) => {\r\n                    return <span key={t}\r\n                          className={currentPage === t ? styles.selectedPage : \"\"}\r\n                          onClick={() => {\r\n                              OnPageHandler(t)\r\n                          }}>{t}</span>})}\r\n                {portionCount>portionNumber &&\r\n                <button onClick={() => {\r\n                    setPortionNumber(portionNumber + 1)\r\n                }}>NEXT</button>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import {Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport {FilterType} from \"../../redux/users-reduсer\";\r\n\r\n\r\ntype  UsersSearchFormPropsType = {\r\n    OnFilterHandler: (filter: FilterType) => void\r\n}\r\n\r\n\r\ntype  FormType = {\r\n    term: string\r\n    friend: \"true\" | \"false\" | \"null\"\r\n}\r\n\r\nexport const UsersSearchForm = React.memo((props: UsersSearchFormPropsType) => {\r\n\r\n\r\n    // const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n    //     const filter: FilterType = {\r\n    //         term: values.term,\r\n    //         friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\r\n    //     }\r\n    //\r\n    //\r\n    //     props.OnFilterHandler(filter)\r\n    //     setSubmitting(false)\r\n    // }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{term: '', friend: \"null\"}}\r\n                validate={values => {\r\n                    const errors = {};\r\n                    return errors;\r\n                }}\r\n                onSubmit={(values, {setSubmitting}) => {\r\n                    const filter: FilterType = {\r\n                        term: values.term,\r\n                        friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\r\n                    }\r\n                    props.OnFilterHandler(filter)\r\n                    setSubmitting(false)\r\n                }}\r\n            >\r\n                {({isSubmitting}) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"term\"/> {/*имя согласовывается с\r\n                         initialValues*/}\r\n                        <Field name=\"friend\" as=\"select\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only Followed</option>\r\n                            <option value=\"false\">UnFollowed</option>\r\n                        </Field>\r\n\r\n\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Find\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n})","import React from 'react';\r\nimport styles from \"./Users.module.css\";\r\nimport image from \"../../img/neand.png\";\r\nimport {FilterType, UsersType} from \"../../redux/users-reduсer\";\r\nimport {NavLink} from 'react-router-dom';\r\nimport {Paginator} from \"./Paginator\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {UsersSearchForm} from \"./UsersSearchForm\";\r\n\r\n\r\ntype  UsersNewPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    setCurrentPage: (currentPage: number) => void\r\n    setUsers: (users: Array<UsersType>) => void\r\n    currentPage: number\r\n    users: Array<UsersType>\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    OnClickPageHandler: (pageNumber: number) => void\r\n    setFollowingInProgress: (userID: number, isFetching: boolean) => void\r\n    followingInProgress: Array<number>\r\n    OnFilterHandler: (filter: FilterType) => void\r\n}\r\n\r\nexport const Users = (props: UsersNewPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    return (\r\n        <div className={styles.main}>\r\n\r\n            <UsersSearchForm OnFilterHandler={props.OnFilterHandler}/>\r\n\r\n            <Paginator currentPage={props.currentPage}\r\n                       OnPageHandler={props.OnClickPageHandler}\r\n                       totalUsersCount={props.totalUsersCount} pageSize={props.pageSize}\r\n                       portionSize={10}\r\n            />\r\n\r\n            {props.users.map((u) => {\r\n                    return <div className={styles.item} key={u.id}>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={\"/profile/\" + u.id}>\r\n                        <img className={styles.image}\r\n                             src={u.photos.small !== null ? u.photos.small : image}\r\n                             alt=\"\"/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div className={styles.follow}> {u.followed\r\n                        ?\r\n                        <button\r\n                            disabled={props.followingInProgress.some((t) => t === u.id)}\r\n                            onClick={() => {\r\n                                props.unfollow(u.id)\r\n                            }}>Unfollow</button>\r\n                        :\r\n                        <button\r\n                            disabled={props.followingInProgress.some((t) => t === u.id)}\r\n                            onClick={() => {\r\n                                props.follow(u.id)\r\n                            }}\r\n                        >Follow</button>}\r\n                    </div>\r\n                      <span>\r\n                            <div className={styles.wrap}>\r\n                    <span className={styles.desc}>Name</span> <div\r\n                                className={styles.name}>{u.name}</div>\r\n\r\n                    </div>\r\n\r\n                </span>\r\n                </span>\r\n\r\n                    </div>\r\n                }\r\n            )\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/3.b98a8c76.svg\";","import React from 'react';\r\nimport preloader from \"../../img/3.svg\";\r\nimport styles from\"./Preloader.module.css\"\r\n\r\nexport const Preloader =() => {\r\n return (\r\n        <div className={styles.main}>\r\n            <img  className={styles.img} alt={\"preloader\"} src={preloader}/>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import {StateReduxType} from \"./redux-store\";\r\nimport {createSelector} from \"reselect\";\r\nimport {UsersType} from \"./users-reduсer\";\r\n\r\nexport const getUsers = (state: StateReduxType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsersSuper = createSelector(getUsers, (users: Array<UsersType>) => {\r\n    return users.map((user) => user)\r\n})\r\n\r\n// export const getUsersSuper = createSelector(getUsers, getPageSize (users: Array<UsersType>, pageSize: number) => {\r\n//     return users.map((user) => true)\r\n// })\r\n\r\n\r\nexport const getPageSize = (state: StateReduxType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: StateReduxType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: StateReduxType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: StateReduxType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingProgress = (state: StateReduxType) => {\r\n    return state.usersPage.followingProgress\r\n}\r\n\r\nexport const getUserFilter= (state: StateReduxType) => {\r\n    return state.usersPage.filter\r\n}\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    FilterType,\r\n    follow,\r\n    getUsersThunkCreator,\r\n    setCurrentPage, setFilter,\r\n    setFollowingInProgress,\r\n    setUsers,\r\n    unfollow,\r\n    UsersType\r\n} from \"../../redux/users-reduсer\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../preloader/Preloader\";\r\nimport {WithAuthRedirect} from \"../../HOC/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {StateReduxType} from \"../../redux/redux-store\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount, getUserFilter,\r\n    getUsersSuper\r\n} from \"../../redux/users-selectors\";\r\n\r\n\r\ntype UsersPropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: []\r\n    filter:FilterType\r\n    setUsers: (users: Array<UsersType>) => void\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    // setPreloader: (isFetching: boolean) => void\r\n    setFollowingInProgress: (userID: number, isFetching: boolean) => void\r\n    getUsers: (currentPage: number, pageSize: number, filter: FilterType) => void\r\n}\r\n\r\nclass UsersContainer extends React.Component <UsersPropsType, StateReduxType> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize, this.props.filter)\r\n    }\r\n\r\n    OnClickPageHandler = (pageNumber: number) => {\r\n        const {currentPage, filter} = this.props\r\n        this.props.getUsers(pageNumber, this.props.pageSize, filter)\r\n    }\r\n\r\n    OnFilterHandler = (filter: FilterType) => {\r\n        const {currentPage, pageSize} = this.props\r\n\r\n        this.props.getUsers(1, pageSize, filter)\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <Users\r\n                    totalUsersCount={this.props.totalUsersCount}\r\n                    pageSize={this.props.pageSize}\r\n                    setCurrentPage={this.props.setCurrentPage}\r\n                    setUsers={this.props.setUsers}\r\n                    currentPage={this.props.currentPage}\r\n                    users={this.props.users}\r\n                    OnFilterHandler={this.OnFilterHandler}\r\n                    follow={this.props.follow}\r\n                    unfollow={this.props.unfollow}\r\n                    OnClickPageHandler={this.OnClickPageHandler}\r\n                    setFollowingInProgress={this.props.setFollowingInProgress}\r\n                    followingInProgress={this.props.followingInProgress}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport const mapStateToProps = (state: StateReduxType) => {\r\n\r\n    return {\r\n        users: getUsersSuper(state),  /*отправляет стейт в компоненту*/\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingProgress(state),\r\n        filter:getUserFilter(state),\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        setCurrentPage,\r\n        setUsers,\r\n        setFollowingInProgress,\r\n        getUsers: getUsersThunkCreator\r\n    }),\r\n    WithAuthRedirect\r\n)(UsersContainer)\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/mountain.ed14195c.jpg\";","import React, {ChangeEvent, KeyboardEvent, useEffect, useState} from 'react';\r\n\r\ntype  StatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\ntype  StatusStateType = {\r\n    status: string\r\n    editMode: boolean\r\n}\r\n\r\n\r\nexport const ProfileStatus = (props: StatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [status, setStatus] = useState<string>(props.status);\r\n\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const ofEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n\r\n    }\r\n\r\n\r\n    const onStatusKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            ofEditMode()\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode\r\n                ?\r\n                <div>\r\n                    <span onDoubleClick={onEditMode}>{props.status}</span>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <input onKeyPress={onStatusKeyPress} onChange={onStatusChange}\r\n                           autoFocus={true} onBlur={ofEditMode}\r\n                           value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/img.61f53e90.png\";","import styles from \"./ProfileInfo.module.css\";\r\nimport mountains from \"../../../img/mountain.jpg\";\r\nimport React, {ChangeEventHandler} from \"react\";\r\nimport {Preloader} from \"../../preloader/Preloader\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\nimport userPhoto from \"../../../img/img.png\";\r\n\r\ntype  ProfileInfoPropsType = {\r\n    profile: null | ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    if (!props.profile) {   /*как это влияет на отрисовку профиля?????*/\r\n        return <Preloader/>\r\n    }\r\n\r\n\r\n    const onInputFileChose: ChangeEventHandler<HTMLInputElement> = (e) => {\r\n\r\n        if (e.target.files && e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <img className={styles.img} src={mountains} alt=\"\"/>\r\n            <div className={styles.profile__wrapper}>\r\n                <h2>Name and Description</h2>\r\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n                <img alt={\"some pic\"} className={styles.image}\r\n                     src={props.profile.photos.large || userPhoto}/>\r\n                {props.isOwner && <input type={\"file\"} onChange={onInputFileChose}/>}\r\n                <div><b>About me: {props.profile.aboutMe}</b> </div>\r\n                <div><b>Looking for a job:</b> {!props.profile.lookingForAJob ? \"Yes\" : \"No\"}</div>\r\n                <div><b> My real name is</b>  {props.profile.fullName[0].toUpperCase() + props.profile.fullName.slice(1)}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/bird.5ea64365.jpg\";","import React from 'react';\r\nimport styles from \"./Post.module.css\"\r\nimport bird from \"../../../../img/bird.jpg\";\r\n\r\n\r\ntype  PostPropsType = {\r\n    message: string\r\n    likes: number\r\n}\r\n\r\nexport const Post = (props:PostPropsType) => {\r\n    return (\r\n        <div className={styles.post}>\r\n            <img className={styles.img} src={bird} alt=\"\"/>\r\n\r\n            <div className={styles.wrap}>\r\n                <div>{props.message} </div>\r\n                <div>Likes {props.likes}</div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport styles from \"./MyPosts.module.css\"\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostsType} from \"../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../FormsControls/Textarea\";\r\n\r\ntype  MyPostsPropsType = {\r\n    posts: Array<PostsType>\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\ntype  FormType = {\r\n    newPostText: string\r\n}\r\n\r\nlet maxLength = maxLengthCreator(15)\r\n\r\n\r\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n    const onAddPost = (values: FormType) => {\r\n        if (values) {\r\n            props.addPost(values.newPostText)\r\n        }\r\n    }\r\n    return (\r\n        <div className={styles.posts}>\r\n            <div className={styles.main}>\r\n                <h2>My Posts</h2>\r\n                <AddNewPostForm onSubmit={onAddPost}/>\r\n            </div>\r\n            {props.posts.map((t, index) => <Post key={index} message={t.message} likes={t.likesCount}/>)}\r\n        </div>\r\n    );\r\n});\r\n\r\nconst AddNewPost = (props: InjectedFormProps<FormType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={\"newPostText\"} component={Textarea} validate={[required, maxLength]} placeholder={\"Post message\"}/>\r\n            </div>\r\n            <button>Add post</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostForm = reduxForm<FormType>({form: \"ProfileAddNewPost\"})(AddNewPost)","import {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {addPostActionCreator} from '../../../redux/profile-reducer';\r\nimport {Dispatch} from \"redux\";\r\nimport {StateReduxType} from \"../../../redux/redux-store\";\r\n\r\n\r\nexport const mapStateToProps = (state: StateReduxType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        // newPostText: state.profilePage.newPostText\r\n\r\n    }\r\n}\r\nexport const mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n\r\n}\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)/*коннект имеет локальный субскрайб*/","import React from 'react';\r\nimport styles from \"./Profile.module.css\"\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\n\r\ntype  ProfilePropsType = {\r\n   // profilePage: ProfilePageType\r\n    // addPost: () => void\r\n    // updateNewPostText: (newText: string) => void\r\n    //dispatch: (action: ActionsType) => void\r\n    profile: null | ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: any) => void\r\n}\r\n\r\n\r\n\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n\r\n\r\n    return (\r\n        <div className={styles.profile}>\r\n            <ProfileInfo savePhoto={props.savePhoto} isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport styles from \"./Profile.module.css\"\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    getStatus,\r\n    getUserProfile,\r\n    ProfileType, savePhoto,\r\n    updateStatus\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {StateReduxType} from \"../../redux/redux-store\";\r\n\r\ntype  ProfileContainerPropsType = {\r\n    // setUserProfile: (profile: ProfileType) => void\r\n    profile: null | ProfileType\r\n    getUserProfile: (userID: string) => void\r\n    getStatus: (userID: string) => void\r\n    updateStatus: (status: string) => void\r\n    status: string\r\n    savePhoto: (file: any) => void\r\n}\r\ntype  PropsType = RouteComponentProps<PathType> & ProfileContainerPropsType  /*типизация пришедшего пути браузера*/\r\ntype  PathType = {\r\n    userId: string\r\n}\r\n\r\nclass ProfileContainer extends React.Component <PropsType, StateReduxType> {\r\n\r\n    refreshProfile() {\r\n        let userID = this.props.match.params.userId\r\n        if (!userID) {\r\n            userID = \"19115\"\r\n            if (!userID) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userID)\r\n        this.props.getStatus(userID)\r\n    }\r\n\r\n\r\n    componentDidMount() {   /*метод жизненного цикла, тут все запросы на сервер*/\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<StateReduxType>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.profile}>\r\n                <Profile {...this.props} profile={this.props.profile}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                         savePhoto={this.props.savePhoto}\r\n                /> {/*все пришедшие пропсы прокидываю дальше*/}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// let AuthRedirectComponent = WithAuthRedirect(ProfileContainer)\r\n\r\n\r\nlet mapStateToProps = (state: StateReduxType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status\r\n    }\r\n}\r\n\r\n\r\n// let ProfileWithUrl = withRouter(AuthRedirectComponent)\r\n// export default connect(mapStateToProps, {getUserProfile})(ProfileWithUrl)\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus,  savePhoto}),\r\n    withRouter,\r\n    // WithAuthRedirect\r\n)(ProfileContainer)","export default __webpack_public_path__ + \"static/media/dragon.5ce493a6.png\";","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport dragon from \"../../img/dragon.png\";\r\nimport styles from \"./Header.module.css\"\r\n\r\ntype  HeaderPropsType = {\r\n    // setUserData: (id: number, email: null | string, login: null | string) => void\r\n    isAuth: boolean\r\n    login: null | string\r\n    loginOut: () => void\r\n}\r\n\r\n\r\nexport const Header = (props: HeaderPropsType) => {\r\n    return (\r\n        <header className={styles.header}>\r\n            <img className={styles.img} src={dragon} alt=\"\"/>\r\n            <div className={styles.auth}>\r\n                {props.isAuth ? <div>{props.login} <button onClick={props.loginOut}>Log out</button></div> :\r\n                    <NavLink to=\"/login\">Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport {Header} from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {loginOut} from \"../../redux/auth-reduсer\";\r\nimport {StateReduxType} from \"../../redux/redux-store\";\r\n\r\ntype  HeaderContainerPropsType = {\r\n    // setUserData: (id: number, email: null | string, login: null | string) => void\r\n    isAuth: boolean\r\n    login: null | string\r\n\r\n    loginOut: any\r\n}\r\n\r\n\r\nclass HeaderContainer extends React.Component <HeaderContainerPropsType, StateReduxType> {\r\n\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: StateReduxType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {loginOut})(HeaderContainer)","import styles from \"./Textarea.module.css\";\r\nimport React from \"react\";\r\nimport {WrappedFieldProps} from \"redux-form\";\r\n\r\nexport const Input = ({input, meta, ...props}: WrappedFieldProps) => {\r\n\r\n    return (\r\n        <div className={`${styles.formControl} ${meta.touched && meta.error ? styles.error : \"\"}`}>\r\n            <div><input {...input} {...props} /></div>\r\n            {meta.touched && meta.error && <span>{meta.error}</span>}\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../FormsControls/Input\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {login} from \"../../redux/auth-reduсer\";\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {StateReduxType} from \"../../redux/redux-store\";\r\n\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captchaURL: string | null\r\n    captcha: string\r\n\r\n}\r\ntype MSTP = {\r\n    isAuth: boolean\r\n    captchaURL: string | null\r\n}\r\ntype MDTP = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\ntype LoginPropsType = MSTP & MDTP\r\n\r\ninterface LoginFormProps extends InjectedFormProps<FormDataType> {\r\n    captchaURL: string | null\r\n}\r\n\r\nconst LoginForm = ({handleSubmit, initialValues}: InjectedFormProps<FormDataType>) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><Field placeholder={\"Login\"} name={\"email\"} validate={[required]}\r\n                        component={Input}/></div>\r\n            <div><Field placeholder={\"Password\"} validate={[required]} type={\"password\"}\r\n                        name={\"password\"}\r\n                        component={Input}/></div>\r\n            <div><Field component={Input} name={\"rememberMe\"} type={\"checkbox\"}/>Remember\r\n                Me\r\n            </div>\r\n            {initialValues.captchaURL && <img alt={\"capture\"} src={initialValues.captchaURL}/>}\r\n            {initialValues.captchaURL && <Field placeholder={\"Type text from captcha\"}  component={Input} validate={[required]} name={\"captcha\"} type={\"input\"}/>}\r\n\r\n\r\n\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst LoginFormRedux = reduxForm<FormDataType>({\r\n    // a unique name for the form\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\nconst Login = ({login, isAuth, captchaURL}: LoginPropsType) => {       /*какие пропсы\r\n типизация*/\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginFormRedux onSubmit={onSubmit} initialValues={{captchaURL}}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: StateReduxType): MSTP => ({\r\n    captchaURL: state.auth.captchaURL,\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport default connect<MSTP, MDTP, {}, StateReduxType>(mapStateToProps, {login})(Login)","import React from 'react';\r\nimport styles from \"./News.module.css\"\r\n\r\n\r\nexport const News = React.memo(() => {\r\n    return (\r\n        <div>\r\n            <h2 className={styles.title}>News</h2>\r\n            <div className={styles.body}></div>\r\n        </div>\r\n    );\r\n});\r\n\r\n","import React from 'react';\r\nimport styles from \"./Music.module.css\"\r\n\r\n\r\nexport const Music = React.memo(() => {\r\n    return (\r\n        <div>\r\n            <h2 className={styles.title}>Music</h2>\r\n            <div className={styles.body}></div>\r\n        </div>\r\n    );\r\n});\r\n\r\n","import React, {Suspense} from 'react';\r\nimport './App.css';\r\n\r\nimport {Redirect, Route, Switch, withRouter} from 'react-router-dom';\r\nimport {Navbar} from './components/Navbar/Navbar';\r\nimport UsersContainer from './components/Users/UsersContainer';\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from \"./components/Login/Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/app-reduсer\";\r\nimport {StateReduxType} from \"./redux/redux-store\";\r\nimport {Preloader} from \"./components/preloader/Preloader\";\r\nimport { News } from './components/News/News';\r\nimport { Music } from './components/Music/Music';\r\n\r\n\r\n\r\n// import DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));/*ленивая загрузка компоненты*/\r\n\r\n\r\ntype AppPropsType = {\r\n    initializeApp: () => void\r\n    initialized: boolean\r\n}\r\n\r\nclass App extends React.Component<AppPropsType> {\r\n\r\n    componentDidMount() {   /*метод жизненного цикла, тут все зхапосы на сервер*/\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <HeaderContainer/>\r\n                {/*<Navbar state={props.store.sidebar}/>*/}\r\n                <Navbar/>\r\n                <div className={\"profile\"}>\r\n                    <Switch>\r\n                        <Route exact path=\"/\" render={() => <Redirect to=\"/profile\"/>}/>\r\n\r\n                        {/*<Route path=\"/dialogs\" render={() => <Dialogs  dispatch={props.dispatch} state={props.store.getState().dialogsPage}/>}/>*/}\r\n                        <Route path=\"/dialogs\"\r\n                               render={() => <Suspense fallback={<div>Loading...</div>}>\r\n                                   <DialogsContainer/></Suspense>}/>\r\n                        {/*<Route path=\"/dialogs\" render={() => <Dialogs  dispatch={props.dispatch} state={props.store.dialogsPage}*/}\r\n                        <Route path=\"/profile/:userId?\"\r\n                               render={() =>\r\n                                   <ProfileContainer/>} /*пробрасываем диспатч вмеесто функцый*//>\r\n                        <Route path=\"/users\" render={() =>\r\n                            <UsersContainer/>} /*пробрасываем диспатч вмеесто функцый*//>\r\n                        <Route path=\"/login\" render={() =>\r\n                            <Login/>} /*пробрасываем диспатч вмеесто функцый*//>\r\n                        <Route path=\"/news\" render={() =>\r\n                            <News/>}/>\r\n                        <Route path=\"/music\" render={() =>\r\n                            <Music/>}/>\r\n                    </Switch>\r\n                    {/*<Dialogs/>*/}\r\n                    {/*<Profile/>*/}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: StateReduxType): MapStateToPropsType => {\r\n    return {\r\n        initialized: state.appReducer.initialized\r\n    }\r\n}\r\n\r\n\r\ntype  MapStateToPropsType = {\r\n    initialized: boolean\r\n}\r\ntype  MapDispatchToProps = {\r\n    initializeApp: () => void\r\n}\r\n\r\ntype  OwnProps = {}\r\n\r\nexport default compose<React.ComponentType>(withRouter, connect<MapStateToPropsType, MapDispatchToProps, OwnProps, StateReduxType>(mapStateToProps, {initializeApp}))(App)\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport './index.css';\r\nimport {store} from \"./redux/redux-store\";\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\r\nimport {Provider} from 'react-redux';\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>{/*позволяет стор  засунуть в контектс*/}\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2i0I_\",\"menu\":\"Navbar_menu__3b9Ky\",\"active\":\"Navbar_active__2kMfW\",\"users\":\"Navbar_users__ruFIE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Friends_main__1XAM0\",\"row\":\"Friends_row__35Bt8\",\"item\":\"Friends_item__1Uooj\",\"images\":\"Friends_images__2gbUq\",\"name\":\"Friends_name__33fB7\"};","export const required: any = (value: any) => {\r\n    return value ? undefined : \"Field is required\"\r\n}\r\n\r\n\r\n\r\n\r\nexport const maxLengthCreator  = (maxLength: number) => (value: any): any=> {\r\n    return value && value.length > maxLength ? `Max length is ${maxLength} symbols` : undefined\r\n\r\n\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"Textarea_formControl__50Apl\",\"error\":\"Textarea_error__2O4Pd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__2LSn5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"ProfileInfo_img__2lCOw\",\"image\":\"ProfileInfo_image__2Jz3F\",\"profile__wrapper\":\"ProfileInfo_profile__wrapper__F4K3S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__3wUTQ\",\"wrap\":\"Post_wrap__bSfXB\",\"img\":\"Post_img__2LJI8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"Header_img__214aN\",\"header\":\"Header_header__2xpWK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Preloader_main__1a-af\",\"img\":\"Preloader_img__2tHPs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__TOD2P\",\"main\":\"MyPosts_main__2ptLK\"};"],"sourceRoot":""}