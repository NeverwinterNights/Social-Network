{"version":3,"sources":["redux/dialogs-reduсer.ts","components/FormsControls/Textarea.tsx","components/Users/Users.module.css","Api/Api.ts","redux/profile-reducer.ts","redux/sidebar-reducer.ts","redux/users-reduсer.ts","redux/auth-reduсer.ts","redux/app-reduсer.ts","redux/redux-store.ts","components/Friends/Friend/Friend.tsx","components/Friends/Friends.tsx","components/Navbar/Navbar.tsx","img/mountain.jpg","img/3.svg","components/preloader/Preloader.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","img/img.png","components/Profile/ProfileInfo/ProfileInfo.tsx","img/bird.jpg","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","img/dragon.png","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/FormsControls/Input.tsx","components/Login/Login.tsx","components/News/News.tsx","components/Music/Music.tsx","img/neand.png","components/Users/Paginator.tsx","components/Users/UsersSearchForm.tsx","redux/users-selectors.ts","components/Users/Users.tsx","components/Users/UsersContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/Navbar/Navbar.module.css","components/Friends/Friends.module.css","utils/validators/validators.ts","components/FormsControls/Textarea.module.css","components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Header/Header.module.css","components/preloader/Preloader.module.css","components/Profile/MyPosts/MyPosts.module.css"],"names":["SendMessageActionCreator","newMessageBody","type","initialState","dialogs","id","name","messages","message","dialogsReducer","state","action","stateCopy","body","push","Textarea","input","meta","props","className","styles","formControl","touched","error","module","exports","instance","axios","create","withCredentials","baseURL","headers","userAPI","currentPage","pageSize","term","friend","get","then","response","data","userID","post","delete","profileAPI","getProfile","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","authAPI","email","password","rememberMe","captcha","securityAPI","posts","likesCount","profile","setStatus","friends","users","totalUsersCount","isFetching","followingProgress","filter","followSuccess","unFollowSuccess","setFilter","payload","setCurrentPage","setPreloader","setFollowingInProgress","getUsersThunkCreator","dispatch","a","items","totalCount","login","isAuth","captchaURL","setUserData","setCaptchaURL","getAuthUserData","resultCode","getCaptcha","res","url","console","log","initialized","reducers","combineReducers","dialogsPage","profilePage","newPostText","sidebar","usersPage","map","u","followed","t","auth","form","formReducer","appReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Friend","item","images","image","src","alt","Friends","main","row","names","index","Navbar","nav","menu","activeClassName","active","to","getState","Preloader","img","preloader","ProfileStatus","useState","editMode","setEditMode","useEffect","ofEditMode","onKeyPress","e","charCode","onChange","currentTarget","value","autoFocus","onBlur","onDoubleClick","ProfileInfo","mountains","profile__wrapper","photos","large","userPhoto","isOwner","target","files","length","aboutMe","lookingForAJob","fullName","toUpperCase","slice","Post","bird","wrap","likes","maxLength","maxLengthCreator","MyPosts","React","memo","AddNewPostForm","onSubmit","values","addPost","reduxForm","handleSubmit","Field","component","validate","required","placeholder","MyPostsContainer","connect","addPostActionCreator","Profile","ProfileContainer","this","match","params","userId","history","getUserProfile","refreshProfile","prevProps","prevState","snapshot","Component","file","withRouter","Header","header","dragon","onClick","loginOut","HeaderContainer","Input","LoginFormRedux","initialValues","Login","useSelector","useDispatch","News","title","Music","Paginator","OnPageHandler","portionSize","pagesCount","Math","ceil","pages","i","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pagination_wrapper","p","selectedPage","UsersSearchForm","setSubmitting","OnFilterHandler","isSubmitting","as","disabled","getPageSize","createSelector","user","getCurrentPage","Users","followingInProgress","followUser","follow","unfollowUser","unfollow","pageNumber","small","some","desc","UsersContainer","DialogsContainer","lazy","App","initializeApp","exact","path","render","fallback","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","undefined"],"mappings":"2LAuBaA,EAA2B,SAACC,GACrC,MAAO,CACHC,KAAM,eACND,mBAIJE,EAAe,CACfC,QAAS,CACL,CAACC,GAAI,EAAGC,KAAM,QACd,CAACD,GAAI,EAAGC,KAAM,QACd,CAACD,GAAI,EAAGC,KAAM,SACd,CAACD,GAAI,EAAGC,KAAM,QACd,CAACD,GAAI,EAAGC,KAAM,SAElBC,SAAU,CACN,CAACF,GAAI,EAAGG,QAAS,UACjB,CAACH,GAAI,EAAGG,QAAS,eACjB,CAACH,GAAI,EAAGG,QAAS,gBACjB,CAACH,GAAI,EAAGG,QAAS,QAKZC,EAAiB,WAA2E,IAA1EC,EAAyE,uDAAhDP,EAAcQ,EAAkC,uCACpG,OAAQA,EAAOT,MAMX,IAAK,eACD,IAAIU,EAAS,2BAAOF,GAAP,IAAcH,SAAS,YAAKG,EAAMH,YAC3CM,EAAOF,EAAOV,eAIlB,OADAW,EAAUL,SAASO,KAAK,CAACT,GAAI,EAAGG,QAASK,IAClCD,EAEX,QACI,OAAOF,K,qHC3DNK,EAAW,SAAC,GAAgD,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,KAASC,EAA8B,gCAEpE,OACI,sBAAKC,UAAS,UAAKC,IAAOC,YAAZ,YAA2BJ,EAAKK,SAAWL,EAAKM,MAAQH,IAAOG,MAAQ,IAArF,UACI,8BAAK,oDAAcP,GAAWE,MAC7BD,EAAKK,SAAWL,EAAKM,OAAS,+BAAON,EAAKM,a,yCCRvDC,EAAOC,QAAU,CAAC,KAAO,oBAAoB,MAAQ,qBAAqB,mBAAqB,kCAAkC,aAAe,4BAA4B,KAAO,oBAAoB,KAAO,oBAAoB,KAAO,oBAAoB,OAAS,sBAAsB,KAAO,sB,4JCE7RC,E,OAAWC,EAAMC,OAAO,CAC1BC,iBAAiB,EACjBC,QAAQ,gDACRC,QAAS,CACL,UAAW,0CAKNC,EAAU,SACVC,EAAqBC,GAAqE,IAAnDC,EAAkD,uDAAnC,GAAIC,EAA+B,uDAAN,KACxF,OAAOV,EAASW,IAAI,qBAAcJ,EAAd,kBAAmCC,EAAnC,iBAAoDC,IAAqB,OAAXC,EAAkB,GAAlB,kBAAkCA,KAC/GE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAH1BR,EAAU,SAKZS,GACH,OAAOf,EAASgB,KAAT,iBAAwBD,KAN1BT,EAAU,SAQVS,GACL,OAAOf,EAASiB,OAAT,iBAA0BF,KAT5BT,EAAU,SAWRS,GACP,OAAOG,EAAWC,WAAWJ,IAKxBG,EAAa,CAEtBC,WAFsB,SAEXJ,GACP,OAAOf,EAASW,IAAI,WAAaI,IAErCK,UALsB,SAKZL,GACN,OAAOf,EAASW,IAAI,kBAAoBI,IAE5CM,aARsB,SAQTC,GACT,OAAOtB,EAASuB,IAAT,kBAAgC,CAACD,YAE5CE,UAXsB,SAWZC,GACN,IAAMC,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,QAASH,GAClBzB,EAASuB,IAAT,iBAA+BG,EAAU,CAC5CrB,QAAS,CACL,eAAgB,2BAOnBwB,EAAU,WAEf,OAAO7B,EAASW,IAAT,YAFFkB,EAAU,SAIbC,EAAeC,GAAiE,IAA/CC,EAA8C,wDAAjBC,EAAiB,uCACjF,OAAOjC,EAASgB,KAAT,aAA4B,CAACc,QAAOC,WAAUC,aAAYC,aAL5DJ,EAAU,WAQf,OAAO7B,EAASiB,OAAT,eAIFiB,EAAc,WAEnB,OAAOlC,EAASW,IAAT,6BCcXlC,EAAe,CACf0D,MAAO,CACH,CAACxD,GAAI,EAAGG,QAAS,QAASsD,WAAY,GACtC,CAACzD,GAAI,EAAGG,QAAS,eAAgBsD,WAAY,IAC7C,CAACzD,GAAI,EAAGG,QAAS,iBAAkBsD,WAAY,KAEnDC,QAAS,KACTf,OAAQ,IAwECgB,EAAY,SAAChB,GACtB,MAAO,CACH9C,KAAM,qBACN8C,WC/JJ7C,EAAe,CACf8D,QAAS,CACL,CAAC3D,KAAM,QACP,CAACA,KAAM,QACP,CAACA,KAAM,QACP,CAACA,KAAM,QACP,CAACA,KAAM,UACP,CAACA,KAAM,WCqFXH,EAA8B,CAC9B+D,MAAO,GACPhC,SAAU,GACViC,gBAAiB,EACjBlC,YAAa,EACbmC,YAAY,EACZC,kBAAmB,GACnBC,OAAQ,CACJnC,KAAM,GACNC,OAAQ,OAkEHmC,EAAgB,SAAC9B,GAC1B,MAAO,CACHvC,KAAM,eACNuC,OAAQA,IAGH+B,EAAkB,SAAC/B,GAC5B,MAAO,CACHvC,KAAM,iBACNuC,OAAQA,IASHgC,EAAY,SAACH,GACtB,MAAO,CACHpE,KAAM,mBACNwE,QAASJ,IAIJK,EAAiB,SAAC1C,GAC3B,MAAO,CACH/B,KAAM,yBACN+B,YAAaA,IAWR2C,EAAe,SAACR,GACzB,MAAO,CACHlE,KAAM,sBACNkE,WAAYA,IAGPS,EAAyB,SAACpC,EAAgB2B,GACnD,MAAO,CACHlE,KAAM,8BACNuC,OAAQA,EACR2B,WAAYA,IAOPU,EAAuB,SAAC7C,EAAqBC,EAAkBoC,GAAxC,8CAA+D,WAAOS,GAAP,eAAAC,EAAA,6DAE/FD,EAASH,GAAa,IACtBG,EAASJ,EAAe1C,IACxB8C,EAASN,EAAUH,IAJ4E,SAK5EtC,EAAiBC,EAAaC,EAAUoC,EAAOnC,KAAMmC,EAAOlC,QALgB,OAKzFI,EALyF,OAM/FuC,EAASH,GAAa,IACtBG,EAlDO,CACH7E,KAAM,kBACNgE,MAgDc1B,EAAKyC,QACvBF,EA9BO,CACH7E,KAAM,gCACNgF,WA4BwB1C,EAAK0C,aAR8D,2CAA/D,uDCnNhC/E,EAA6B,CAC7BE,GAAI,EACJmD,MAAO,KACP2B,MAAO,KACPC,QAAQ,EACRC,WAAY,MAqCHC,EAAc,SAACjF,EAAmBmD,EAAsB2B,EAAsBC,GACvF,MAAO,CACHlF,KAAM,qBACNwE,QAAS,CACLrE,KACAmD,QACA2B,QACAC,YAKCG,EAAgB,SAACF,GAC1B,MAAO,CACHnF,KAAM,uBACNwE,QAAS,CACLW,gBAOCG,EAAkB,yDAAgB,WAAOT,GAAP,uBAAAC,EAAA,sEACtBzB,IADsB,OAGV,KAF7BhB,EADuC,QAG9BC,KAAKiD,aAAmB,EACRlD,EAASC,KAAKA,KAAlCnC,EAD2B,EAC3BA,GAAImD,EADuB,EACvBA,MAAO2B,EADgB,EAChBA,MAChBJ,EAASO,EAAYjF,EAAImD,EAAO2B,GAAO,KALA,2CAAhB,uDAuBlBO,EAAa,yDAAgB,WAAOX,GAAP,iBAAAC,EAAA,+EAEhBpB,IAFgB,OAE5B+B,EAF4B,OAG5BN,EAAaM,EAAInD,KAAKoD,IAC5Bb,EAASQ,EAAcF,IAJW,gDAMlCQ,QAAQC,IAAR,MANkC,qGAAhB,uD,kBCtFtB3F,EAA6B,CAC7B4F,aAAa,GCAbC,EAAWC,YAAgB,CAC3BC,YAAazF,IACb0F,YLuE0B,WAAkF,IAAjFzF,EAAgF,uDAAvDP,EAAcQ,EAAyC,uCAC3G,OAAQA,EAAOT,MACX,IAAK,qBACD,OAAO,2BACAQ,GADP,IAEIsC,OAAQrC,EAAOqC,SAGvB,IAAK,mBAMD,OAAO,2BACAtC,GADP,IAEImD,MAAM,CAAE,CACJxD,GAAI,EACJG,QAASG,EAAOyF,YAChBtC,WAAY,IAHX,mBAICpD,EAAMmD,UAQpB,IAAK,2BACD,OAAO,2BAAInD,GAAX,IAAkBqD,QAASpD,EAAOoD,UAEtC,IAAK,sBACD,OAAO,2BAAIrD,GAAX,IAAkBmD,MAAOnD,EAAMmD,MAAMS,QAAO,SAAC5B,GAAD,OAAUA,EAAKrC,IAAMM,EAAON,QAE5E,IAAK,oBACD,OAAO,2BAAIK,GAAX,IAAkBqD,QAASrD,EAAMqD,QAAN,eAAoBrD,EAAMqD,SAAW,OAEpE,QACI,OAAOrD,IK5Gf2F,QJN0B,WAAqD,IAApD3F,EAAmD,uDAA9BP,EAEhD,OAAOO,GIKP4F,UH0FwB,WAA6E,IAA5E5F,EAA2E,uDAApDP,EAAcQ,EAAsC,uCACpG,OAAQA,EAAOT,MACX,IAAK,eACD,OAAO,2BACAQ,GADP,IAEIwD,MAAOxD,EAAMwD,MAAMqC,KAAI,SAACC,GACpB,OAAIA,EAAEnG,KAAOM,EAAO8B,OACT,2BAAI+D,GAAX,IAAcC,UAAU,IAErBD,OAKnB,IAAK,iBACD,OAAO,2BACA9F,GADP,IAEIwD,MAAOxD,EAAMwD,MAAMqC,KAAI,SAACC,GACpB,OAAIA,EAAEnG,KAAOM,EAAO8B,OACT,2BAAI+D,GAAX,IAAcC,UAAU,IAErBD,OAInB,IAAK,kBACD,OAAO,2BAAI9F,GAAX,IAAkBwD,MAAOvD,EAAOuD,QAEpC,IAAK,yBACD,OAAO,2BAAIxD,GAAX,IAAkBuB,YAAatB,EAAOsB,cAE1C,IAAK,gCACD,OAAO,2BAAIvB,GAAX,IAAkByD,gBAAiBxD,EAAOuE,aAE9C,IAAK,sBACD,OAAO,2BAAIxE,GAAX,IAAkB0D,WAAYzD,EAAOyD,aAEzC,IAAK,8BACD,OAAO,2BACA1D,GADP,IAEI2D,kBAAmB1D,EAAOyD,WAAP,sBACT1D,EAAM2D,mBADG,CACgB1D,EAAO8B,SACpC/B,EAAM2D,kBAAkBC,QAAO,SAACoC,GAAD,OAAOA,IAAM/F,EAAO8B,YAIjE,IAAK,mBACD,OAAO,2BAAI/B,GAAX,IAAkB4D,OAAQ3D,EAAO+D,UAErC,QACI,OAAOhE,IG3IfiG,KFCuB,WAA+C,IAA9CjG,EAA6C,uDAArCP,EAAcQ,EAAuB,uCACrE,OAAQA,EAAOT,MACX,IAAK,qBAML,IAAK,uBACD,OAAO,2BAAIQ,GAAUC,EAAO+D,SAIhC,QACI,OAAOhE,IEdfkG,KAAMC,IACNC,WDHsB,WAA2E,IAA1EpG,EAAyE,uDAAnDP,EAAcQ,EAAqC,uCAChG,OAAQA,EAAOT,MAEX,IAAK,wBACD,OAAO,2BACAQ,GADP,IAEIqF,aAAa,IAGrB,QACI,OAAOrF,MCHbqG,EAAoBC,QAAWA,OAAeC,sCAAyCC,IAEhFC,EAA+BC,YAAYpB,EAAUe,EAAiBM,YAAgBC,OAYnGN,OAAOG,MAAQA,E,4HCjCFI,GAAS,SAACrG,GACnB,OACI,uBAAKC,UAAWC,KAAOoG,KAAvB,UACI,sBAAKrG,UAAWC,KAAOqG,OAAvB,SACI,sBAAKtG,UAAWC,KAAOsG,MAAOC,IAAI,oEAAoEC,IAAI,OAE9G,sBAAKzG,UAAWC,KAAOd,KAAvB,SACI,gCAAOY,EAAMZ,aCPhBuH,GAAU,SAAC3G,GACpB,OACI,uBAAKC,UAAWC,KAAO0G,KAAvB,UACI,+CACA,sBAAK3G,UAAWC,KAAO2G,IAAvB,SACK7G,EAAM8G,MAAMzB,KAAI,SAACG,EAAGuB,GAAJ,OAAc,eAAC,GAAD,CAAQ3H,KAAMoG,EAAEpG,MAAW2H,YCH7DC,GAAS,SAAChH,GACnB,OACI,uBAAKC,UAAWC,IAAO+G,IAAvB,UACI,uBAAKhH,UAAWC,IAAOgH,KAAvB,UACI,+BAAK,eAAC,KAAD,CAASC,gBAAiBjH,IAAOkH,OAAQC,GAAG,WAA5C,uBACL,+BAAK,eAAC,KAAD,CAASF,gBAAiBjH,IAAOkH,OAAQC,GAAG,WAA5C,uBACL,+BAAK,eAAC,KAAD,CAASF,gBAAiBjH,IAAOkH,OAAQC,GAAG,QAA5C,oBACL,+BAAK,eAAC,KAAD,CAASF,gBAAiBjH,IAAOkH,OAAQC,GAAG,SAA5C,wBAGT,sBAAKpH,UAAWC,IAAO6C,QAAvB,SACI,eAAC,GAAD,CAAS+D,MAAOb,EAAMqB,WAAWnC,QAAQpC,YAE7C,+BAAK,eAAC,KAAD,CAAS9C,UAAWC,IAAO8C,MAAOmE,gBAAiBjH,IAAOkH,OAAQC,GAAG,SAArE,yB,wCCzBF,OAA0B,qCCA1B,OAA0B,8B,oBCI5BE,GAAW,WACvB,OACO,sBAAKtH,UAAWC,KAAO0G,KAAvB,SACI,sBAAM3G,UAAWC,KAAOsH,IAAKd,IAAK,YAAaD,IAAKgB,Q,SCOnDC,GAAgB,SAAC1H,GAA4B,IAAD,EAErB2H,oBAAkB,GAFG,oBAE9CC,EAF8C,KAEpCC,EAFoC,OAGzBF,mBAAiB3H,EAAM8B,QAHE,oBAG9CA,EAH8C,KAGtCgB,EAHsC,KAMrDgF,qBAAU,WACNhF,EAAU9C,EAAM8B,UACjB,CAAC9B,EAAM8B,SAGV,IAGMiG,EAAa,WACfF,GAAY,GACZ7H,EAAM6B,aAAaC,IAgBvB,OACI,+BACM8F,EAME,+BACI,wBAAOI,WAhBE,SAACC,GACH,KAAfA,EAAEC,UACFH,KAc6CI,SAtB9B,SAACF,GACpBnF,EAAUmF,EAAEG,cAAcC,QAsBPC,WAAW,EAAMC,OAAQR,EACzBM,MAAOvG,MAPlB,+BACI,uBAAM0G,cA1BH,WACfX,GAAY,IAyBA,SAAkC7H,EAAM8B,cCnD7C,OAA0B,gCCgB5B2G,GAAc,SAACzI,GACxB,IAAKA,EAAM6C,QACP,OAAO,eAAC,GAAD,IAYX,OACI,iCACI,sBAAK5C,UAAWC,KAAOsH,IAAKf,IAAKiC,GAAWhC,IAAI,KAChD,uBAAKzG,UAAWC,KAAOyI,iBAAvB,UACI,uDACA,eAAC,GAAD,CAAe7G,OAAQ9B,EAAM8B,OAAQD,aAAc7B,EAAM6B,eACzD,sBAAK6E,IAAK,WAAYzG,UAAWC,KAAOsG,MACnCC,IAAKzG,EAAM6C,QAAQ+F,OAAOC,OAASC,KACvC9I,EAAM+I,SAAW,wBAAO/J,KAAM,OAAQmJ,SAhBY,SAACF,GAExDA,EAAEe,OAAOC,OAAShB,EAAEe,OAAOC,MAAMC,QACjClJ,EAAMgC,UAAUiG,EAAEe,OAAOC,MAAM,OAc3B,iCAAK,4CAAcjJ,EAAM6C,QAAQsG,WAAjC,OACA,iCAAK,oDAAL,IAAiCnJ,EAAM6C,QAAQuG,eAAyB,KAAR,SAChE,iCAAK,kDAAL,KAA+BpJ,EAAM6C,QAAQwG,SAAS,GAAGC,cAAgBtJ,EAAM6C,QAAQwG,SAASE,MAAM,a,wCCzCvG,OAA0B,iCCU5BC,GAAO,SAACxJ,GACjB,OACI,uBAAKC,UAAWC,KAAOsB,KAAvB,UACI,sBAAKvB,UAAWC,KAAOsH,IAAKf,IAAKgD,GAAM/C,IAAI,KAE3C,uBAAKzG,UAAWC,KAAOwJ,KAAvB,UACI,iCAAM1J,EAAMV,QAAZ,OACA,0CAAYU,EAAM2J,gB,uCCA9BC,GAAYC,aAAiB,IAGpBC,GAAUC,IAAMC,MAAK,SAAChK,GAO/B,OACI,uBAAKC,UAAWC,KAAOyC,MAAvB,UACI,uBAAK1C,UAAWC,KAAO0G,KAAvB,UACI,2CACA,eAACqD,GAAD,CAAgBC,SATV,SAACC,GACXA,GACAnK,EAAMoK,QAAQD,EAAOjF,mBASpBlF,EAAM2C,MAAM0C,KAAI,SAACG,EAAGuB,GAAJ,OAAc,eAAC,GAAD,CAAkBzH,QAASkG,EAAElG,QAASqK,MAAOnE,EAAE5C,YAApCmE,YAgBhDkD,GAAiBI,aAAoB,CAAC3E,KAAM,qBAA3B2E,EAXJ,SAACrK,GAChB,OACI,wBAAMkK,SAAUlK,EAAMsK,aAAtB,UACI,+BACI,eAACC,GAAA,EAAD,CAAOnL,KAAM,cAAeoL,UAAW3K,KAAU4K,SAAU,CAACC,KAAUd,IAAYe,YAAa,mBAEnG,qD,QCtBCC,GAAmBC,cAfD,SAACrL,GAC5B,MAAO,CACHmD,MAAOnD,EAAMyF,YAAYtC,UAKC,SAACkB,GAC/B,MAAO,CACHuG,QAAS,SAAClF,GACNrB,ElBqHwB,SAACqB,GACjC,MAAO,CACHlG,KAAM,mBACNkG,ekBxHa4F,CAAqB5F,QAKV2F,CAA6Cf,ICAhEiB,GAAU,SAAC/K,GAGpB,OACI,uBAAKC,UAAWC,KAAO2C,QAAvB,UACI,eAAC,GAAD,CAAab,UAAWhC,EAAMgC,UAAW+G,QAAS/I,EAAM+I,QAASlG,QAAS7C,EAAM6C,QAASf,OAAQ9B,EAAM8B,OAAQD,aAAc7B,EAAM6B,eACnI,eAAC+I,GAAD,QCANI,G,oKAEF,WACI,IAAIzJ,EAAS0J,KAAKjL,MAAMkL,MAAMC,OAAOC,OAChC7J,IACDA,EAAS,UAEL0J,KAAKjL,MAAMqL,QAAQzL,KAAK,UAGhCqL,KAAKjL,MAAMsL,eAAe/J,GAC1B0J,KAAKjL,MAAM4B,UAAUL,K,+BAIzB,WACI0J,KAAKM,mB,gCAGT,SAAmBC,EAAgCC,EAAqCC,GAChFT,KAAKjL,MAAMkL,MAAMC,OAAOC,SAAWI,EAAUN,MAAMC,OAAOC,QAC1DH,KAAKM,mB,oBAKb,WACI,OACI,uBAAKtL,UAAWC,KAAO2C,QAAvB,UACI,eAAC,GAAD,2BAAaoI,KAAKjL,OAAlB,IAAyB6C,QAASoI,KAAKjL,MAAM6C,QACpCkG,SAAUkC,KAAKjL,MAAMkL,MAAMC,OAAOC,OAClCtJ,OAAQmJ,KAAKjL,MAAM8B,OACnBD,aAAcoJ,KAAKjL,MAAM6B,aACzBG,UAAWiJ,KAAKjL,MAAMgC,aALnC,W,GA5BmB+H,IAAM4B,WAwDtB3F,eACX6E,cAZkB,SAACrL,GACnB,MAAO,CACHqD,QAASrD,EAAMyF,YAAYpC,QAC3Bf,OAAQtC,EAAMyF,YAAYnD,UASL,CAACwJ,epByFA,SAAC/J,GAAD,8CAAoB,WAAOsC,GAAP,eAAAC,EAAA,sEACvBhD,EAAmBS,GADI,OACxCF,EADwC,OAE9CwC,EAvBO,CACH7E,KAAM,2BACN6D,QAqBoBxB,EAASC,OAFa,2CAApB,uDoBzFgBM,UpB+FrB,SAACL,GAAD,8CAAoB,WAAOsC,GAAP,eAAAC,EAAA,sEAClBpC,EAAWE,UAAUL,GADH,OACnCF,EADmC,OAEzCwC,EAASf,EAAUzB,EAASC,OAFa,2CAApB,uDoB/FgCO,apBoG7B,SAACC,GAAD,8CAAoB,WAAO+B,GAAP,SAAAC,EAAA,sEACrBpC,EAAWG,aAAaC,GADH,OAEX,IAFW,OAE/BR,KAAKiD,YACdV,EAASf,EAAUhB,IAHqB,2CAApB,uDoBpG4CE,UpB2G/C,SAAC4J,GAAD,8CAAgB,WAAO/H,GAAP,eAAAC,EAAA,sEACdpC,EAAWM,UAAU4J,GADP,OAGJ,KAF3BvK,EAD+B,QAGxBC,KAAKiD,YACdV,EA7BG,CACH7E,KAAM,oBACN4J,OA2B0BvH,EAASC,KAAKsH,SAJP,2CAAhB,yDoB1GrBiD,IAFW7F,CAIbgF,ICxFa,OAA0B,mC,oBCa5Bc,GAAS,SAAC9L,GACnB,OACI,0BAAQC,UAAWC,KAAO6L,OAA1B,UACI,sBAAK9L,UAAWC,KAAOsH,IAAKf,IAAKuF,GAAQtF,IAAI,KAC7C,sBAAKzG,UAAWC,KAAOuF,KAAvB,SACKzF,EAAMkE,OAAS,iCAAMlE,EAAMiE,MAAZ,IAAmB,yBAAQgI,QAASjM,EAAMkM,SAAvB,wBAC/B,eAAC,KAAD,CAAS7E,GAAG,SAAZ,yBCJd8E,G,4JAEF,WACI,OACI,eAAC,GAAD,eAAYlB,KAAKjL,Y,GAJC+J,IAAM4B,WAerBd,iBANO,SAACrL,GACnB,MAAO,CACH0E,OAAQ1E,EAAMiG,KAAKvB,OACnBD,MAAOzE,EAAMiG,KAAKxB,SAGc,CAACiI,SpBsFjB,kBAAM,SAACrI,GAE3BxB,IACKjB,MAAK,SAACC,GAC8B,IAA7BA,EAASC,KAAKiD,YACdV,EAASO,EAAY,KAAM,KAAM,MAAM,UoB3FxCyG,CAAqCsB,I,6BC1BvCC,GAAQ,SAAC,GAAgD,IAA/CtM,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,KAASC,EAA8B,iCAEjE,OACI,uBAAKC,UAAS,UAAKC,KAAOC,YAAZ,YAA2BJ,EAAKK,SAAWL,EAAKM,MAAQH,KAAOG,MAAQ,IAArF,UACI,+BAAK,kDAAWP,GAAWE,MAC1BD,EAAKK,SAAWL,EAAKM,OAAS,gCAAON,EAAKM,YCgDjDgM,GAAiBhC,aAAwB,CAE3C3E,KAAM,SAFa2E,EAzBL,SAAC,GAAoE,IAAnEC,EAAkE,EAAlEA,aAAcgC,EAAoD,EAApDA,cAC9B,OACI,wBAAMpC,SAAUI,EAAhB,UACI,+BAAK,eAACC,GAAA,EAAD,CAAOI,YAAa,QAASvL,KAAM,QAASqL,SAAU,CAACC,MAChDF,UAAW4B,OACvB,+BAAK,eAAC7B,GAAA,EAAD,CAAOI,YAAa,WAAYF,SAAU,CAACC,MAAW1L,KAAM,WACrDI,KAAM,WACNoL,UAAW4B,OACvB,iCAAK,eAAC7B,GAAA,EAAD,CAAOC,UAAW4B,GAAOhN,KAAM,aAAcJ,KAAM,aAAxD,iBAGCsN,EAAcnI,YACf,sBAAKuC,IAAK,UAAWD,IAAK6F,EAAcnI,aACvCmI,EAAcnI,YACf,eAACoG,GAAA,EAAD,CAAOI,YAAa,yBAA0BH,UAAW4B,GAClD3B,SAAU,CAACC,MAAWtL,KAAM,UAAWJ,KAAM,UAGpD,+BACI,oDAWHuN,GAAQ,WAIjB,IAAMpI,EAAaqI,cAA2C,SAAAhN,GAAK,OAAIA,EAAMiG,KAAKtB,cAC5ED,EAASsI,cAAqC,SAAAhN,GAAK,OAAIA,EAAMiG,KAAKvB,UAClEL,EAAW4I,eAQjB,OAAIvI,EACO,eAAC,IAAD,CAAUmD,GAAI,aAIrB,iCACI,wCACA,eAACgF,GAAD,CAAgBnC,SAZP,SAAChI,GtBoBD,IAACI,EAAeC,EAAkBC,EAAqBC,EsBnBpEoB,GtBmBcvB,EsBnBCJ,EAASI,MtBmBKC,EsBnBEL,EAASK,StBmBOC,EsBnBGN,EAASM,WtBmBSC,EsBnBGP,EAASO,QtBmBnE,uCAAgJ,WAAOoB,GAAP,eAAAC,EAAA,sEAE5IzB,EAAcC,EAAOC,EAAUC,EAAYC,GAFiG,OAGhI,KAD7BpB,EAF6J,QAGpJC,KAAKiD,YACdV,EAASS,KAEoB,KAA7BjD,EAASC,KAAKiD,YACdV,EAASW,KAPoJ,2CAAhJ,yDsBR2B8H,cAAe,CAACnI,oB,oBC/EnDuI,GAAO3C,IAAMC,MAAK,WAC3B,OACI,iCACI,qBAAI/J,UAAWC,KAAOyM,MAAtB,kBACA,sBAAK1M,UAAWC,KAAOP,a,oBCJtBiN,GAAQ7C,IAAMC,MAAK,WAC5B,OACI,iCACI,qBAAI/J,UAAWC,KAAOyM,MAAtB,mBACA,sBAAK1M,UAAWC,KAAOP,a,oBCRpB,OAA0B,kCCY5BkN,GAAY,SAAC,GAUtB,IAJgD,IALtB5J,EAKqB,EALrBA,gBACAjC,EAIqB,EAJrBA,SACAD,EAGqB,EAHrBA,YACA+L,EAEqB,EAFrBA,cAEqB,IADrBC,mBACqB,MADP,GACO,EAE3CC,EAAaC,KAAKC,KAAKjK,EAAkBjC,GACzCmM,EAAuB,GAClBC,EAAI,EAAGA,GAAKJ,EAAYI,IAC7BD,EAAMvN,KAAKwN,GAGf,IAAMC,EAAeJ,KAAKC,KAAKF,EAAaD,GARG,EASLpF,mBAAiB,GATZ,oBASxC2F,EATwC,KASzBC,EATyB,KAUzCC,GAAyBF,EAAgB,GAAKP,EAAc,EAC5DU,EAAyBH,EAAgBP,EAE/C,OACI,sBAAK9M,UAAWC,KAAO0G,KAAvB,SACI,uBAAK3G,UAAWC,KAAOwN,mBAAvB,UACKJ,EAAgB,GACjB,yBAAQrB,QAAS,WACbsB,EAAiBD,EAAgB,IADrC,kBAGCH,EAAM/J,QAAO,SAAAuK,GAAC,OAAIA,GAAKH,GAAyBG,GAAKF,KAAwBpI,KAAI,SAACG,GAC/E,OAAO,uBACDvF,UAAWc,IAAgByE,EAAItF,KAAO0N,aAAe,GACrD3B,QAAS,WACLa,EAActH,IAHjB,SAIGA,GAJQA,MAKrB6H,EAAaC,GACd,yBAAQrB,QAAS,WACbsB,EAAiBD,EAAgB,IADrC,wB,SC9BHO,GAAkB9D,IAAMC,MAAK,SAAChK,GAevC,OACI,+BACI,eAAC,KAAD,CACIsM,cAAe,CAACrL,KAAM,GAAIC,OAAQ,QAClCuJ,SAAU,SAAAN,GAEN,MADe,IAGnBD,SAAU,SAACC,EAAD,GAA8B,IAApB2D,EAAmB,EAAnBA,cACV1K,EAAqB,CACvBnC,KAAMkJ,EAAOlJ,KACbC,OAA0B,SAAlBiJ,EAAOjJ,OAAoB,KAAyB,SAAlBiJ,EAAOjJ,QAErDlB,EAAM+N,gBAAgB3K,GACtB0K,GAAc,IAZtB,SAeK,gBAAEE,EAAF,EAAEA,aAAF,OACG,gBAAC,KAAD,WACI,eAAC,KAAD,CAAOhP,KAAK,OAAOI,KAAK,SAD5B,IAGI,gBAAC,KAAD,CAAOA,KAAK,SAAS6O,GAAG,SAAxB,UACI,yBAAQ5F,MAAM,OAAd,iBACA,yBAAQA,MAAM,OAAd,2BACA,yBAAQA,MAAM,QAAd,2BAIJ,yBAAQrJ,KAAK,SAASkP,SAAUF,EAAhC,6B,UCzCXG,IATgBC,cAJL,SAAC5O,GACrB,OAAOA,EAAM4F,UAAUpC,SAG2B,SAACA,GACnD,OAAOA,EAAMqC,KAAI,SAACgJ,GAAD,OAAUA,QAQJ,SAAC7O,GACxB,OAAOA,EAAM4F,UAAUpE,WAOdsN,GAAiB,SAAC9O,GAC3B,OAAOA,EAAM4F,UAAUrE,aCRdwN,GAAQ,WACjB,IAAM1K,EAAW4I,eAEXxJ,EAAkBuJ,cAAoC,SAAAhN,GAAK,OAAIA,EAAM4F,UAAUnC,mBAC/ElC,EAAcyL,aAAoC8B,IAClDtN,EAAWwL,aAAoC2B,IAC/C/K,EAASoJ,cAAwC,SAAAhN,GAAK,OAAIA,EAAM4F,UAAUhC,UAC1EJ,EAAQwJ,cAA8C,SAAAhN,GAAK,OAAIA,EAAM4F,UAAUpC,SAC/EwL,EAAsBhC,cAA2C,SAAAhN,GAAK,OAAIA,EAAM4F,UAAUjC,qBAEhG2E,qBAAU,WACNjE,EAASD,EAAqB7C,EAAaC,EAAUoC,MACtD,IAGH,IAQMqL,EAAa,SAAClN,GAChBsC,E9BoMc,SAACtC,GACnB,8CAAO,WAAOsC,GAAP,SAAAC,EAAA,6DACHD,EAASF,EAAuBpC,GAAQ,IADrC,SAEoBT,EAAeS,GAFnC,OAG8B,IAH9B,OAGUD,KAAKiD,YACdV,EAASR,EAAc9B,IAE3BsC,EAASF,EAAuBpC,GAAQ,IANrC,2CAAP,sD8BrMamN,CAAOnN,KAIdoN,EAAe,SAACpN,GAClBsC,E9B0MgB,SAACtC,GACrB,8CAAO,WAAOsC,GAAP,SAAAC,EAAA,6DACHD,EAASF,EAAuBpC,GAAQ,IADrC,SAEoBT,EAAiBS,GAFrC,OAG8B,IAH9B,OAGUD,KAAKiD,YACdV,EAASP,EAAgB/B,IAE7BsC,EAASF,EAAuBpC,GAAQ,IANrC,2CAAP,sD8B3MaqN,CAASrN,KAItB,OACI,uBAAKtB,UAAWC,KAAO0G,KAAvB,UAEI,eAACiH,GAAD,CAAiBE,gBAjBD,SAAC3K,GACrBS,EAASD,EAAqB,EAAG5C,EAAUoC,OAkBvC,eAAC,GAAD,CAAWrC,YAAaA,EACb+L,cAxBQ,SAAC+B,GACxBhL,EAASD,EAAqBiL,EAAY7N,EAAUoC,KAwBrCH,gBAAiBA,EAAiBjC,SAAUA,EAC5C+L,YAAa,KAGvB/J,EAAMqC,KAAI,SAACC,GACJ,OAAO,sBAAKrF,UAAWC,KAAOoG,KAAvB,SACX,kCACI,+BACI,eAAC,KAAD,CAASe,GAAI,YAAc/B,EAAEnG,GAA7B,SACA,sBAAKc,UAAWC,KAAOsG,MAClBC,IAAwB,OAAnBnB,EAAEsD,OAAOkG,MAAiBxJ,EAAEsD,OAAOkG,MAAQtI,GAChDE,IAAI,SAGb,uBAAKzG,UAAWC,KAAOwO,OAAvB,cAAiCpJ,EAAEC,SAE/B,yBACI2I,SAAUM,EAAoBO,MAAK,SAACvJ,GAAD,OAAOA,IAAMF,EAAEnG,MAClD8M,QAAS,WACL0C,EAAarJ,EAAEnG,KAHvB,sBAMA,yBACI+O,SAAUM,EAAoBO,MAAK,SAACvJ,GAAD,OAAOA,IAAMF,EAAEnG,MAClD8M,QAAS,WACLwC,EAAWnJ,EAAEnG,KAHrB,uBAOF,gCACM,uBAAKc,UAAWC,KAAOwJ,KAAvB,UACR,uBAAMzJ,UAAWC,KAAO8O,KAAxB,kBADQ,IACkC,sBAC9B/O,UAAWC,KAAOd,KADY,SACLkG,EAAElG,gBA3BEkG,EAAEnG,WCtDlD8P,GAAiBlF,IAAMC,MAAK,WAErC,IAAM9G,EAAasJ,cAAqC,SAAAhN,GAAK,OAAIA,EAAM4F,UAAUlC,cAGjF,OACI,uCACKA,EAAa,eAAC,GAAD,IAAe,KAC7B,eAAC,GAAD,UCGNgM,GAAmBnF,IAAMoF,MAAK,kBAAM,iCAQpCC,G,uKAEF,WACInE,KAAKjL,MAAMqP,kB,oBAGf,WACI,OAAKpE,KAAKjL,MAAM6E,YAKZ,uBAAK5E,UAAU,MAAf,UACI,eAAC,GAAD,IAEA,eAAC,GAAD,IACA,sBAAKA,UAAW,UAAhB,SACI,gBAAC,IAAD,WACI,eAAC,IAAD,CAAOqP,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,eAAC,IAAD,CAAUnI,GAAG,gBAGjD,eAAC,IAAD,CAAOkI,KAAK,WACLC,OAAQ,kBAAM,eAAC,WAAD,CAAUC,SAAU,8CAApB,SACV,eAACP,GAAD,SAEX,eAAC,IAAD,CAAOK,KAAK,oBACLC,OAAQ,kBACJ,eAAC,GAAD,OACX,eAAC,IAAD,CAAOD,KAAK,SAASC,OAAQ,kBACzB,eAACP,GAAD,OACJ,eAAC,IAAD,CAAOM,KAAK,SAASC,OAAQ,kBACzB,eAAC,GAAD,OACJ,eAAC,IAAD,CAAOD,KAAK,QAAQC,OAAQ,kBACxB,eAAC9C,GAAD,OACJ,eAAC,IAAD,CAAO6C,KAAK,SAASC,OAAQ,kBACzB,eAAC5C,GAAD,eA3BT,eAAC,GAAD,Q,GARD7C,IAAM4B,WA6DT3F,eAA6B6F,IAAYhB,cAhBhC,SAACrL,GACrB,MAAO,CACHqF,YAAarF,EAAMoG,WAAWf,eAc8G,CAACwK,c9B9CxH,yDAAgB,WAAOxL,GAAP,SAAAC,EAAA,sEACnCD,EAASS,KAD0B,OAEzCT,EAPO,CACH7E,KAAM,0BAI+B,2CAAhB,yD8B8CdgH,CAAuJoJ,IC3EvJM,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBxO,MAAK,YAAkD,IAA/CyO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCEdO,IAASV,OACL,eAAC,IAAMW,WAAP,UACI,eAAC,KAAD,UACI,eAAC,KAAD,CAAUlK,MAAOA,EAAjB,SACI,eAAC,GAAD,UAIZmK,SAASC,eAAe,SAM5BX,M,mBCxBApP,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,qBAAqB,OAAS,uBAAuB,MAAQ,wB,mBCAhHD,EAAOC,QAAU,CAAC,KAAO,sBAAsB,IAAM,qBAAqB,KAAO,sBAAsB,OAAS,wBAAwB,KAAO,wB,gCCD/I,oEAAO,IAAMmK,EAAgB,SAACrC,GAC1B,OAAOA,OAAQiI,EAAY,qBAMlBzG,EAAoB,SAACD,GAAD,OAAuB,SAACvB,GACrD,OAAOA,GAASA,EAAMa,OAASU,EAAxB,wBAAqDA,EAArD,iBAA2E0G,K,mBCPtFhQ,EAAOC,QAAU,CAAC,YAAc,8BAA8B,MAAQ,0B,mBCAtED,EAAOC,QAAU,CAAC,QAAU,2B,mBCA5BD,EAAOC,QAAU,CAAC,IAAM,yBAAyB,MAAQ,2BAA2B,iBAAmB,wC,mBCAvGD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,KAAO,mBAAmB,IAAM,oB,mBCA5ED,EAAOC,QAAU,CAAC,IAAM,oBAAoB,OAAS,yB,mBCArDD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,IAAM,yB,mBCAvDD,EAAOC,QAAU,CAAC,MAAQ,uBAAuB,KAAO,wB","file":"static/js/main.f769c6ee.chunk.js","sourcesContent":["import {DialogsType, MessagesType} from \"./store\";\r\n\r\n\r\nexport type  DialogsPageType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n\r\n}\r\n\r\n\r\nexport type  SendMessageActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"SEND-MESSAGE\"\r\n    newMessageBody:string\r\n}\r\n\r\n\r\n// export const updateNewPostBodyActionCreator = (body: string): UpdateNewPostBodyActionType => {\r\n//     return {\r\n//         type: \"UPDATE-NEW-POST-BODY\",\r\n//         body: body\r\n//     }\r\n// }\r\n\r\nexport const SendMessageActionCreator = (newMessageBody:string): SendMessageActionType => {\r\n    return {\r\n        type: \"SEND-MESSAGE\",\r\n        newMessageBody\r\n    }\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Ivan\"},\r\n        {id: 2, name: \"Oleg\"},\r\n        {id: 3, name: \"Misha\"},\r\n        {id: 4, name: \"Petr\"},\r\n        {id: 5, name: \"Alex\"},\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Privet\"},\r\n        {id: 2, message: \"How are you\"},\r\n        {id: 3, message: \"Lets we meet\"},\r\n        {id: 4, message: \"No\"},\r\n    ],\r\n   }\r\n\r\n\r\nexport const dialogsReducer = (state: DialogsPageType = initialState, action: SendMessageActionType) => {\r\n    switch (action.type) {\r\n        // case \"UPDATE-NEW-POST-BODY\": {\r\n        //     let stateCopy = {...state} /*делается копия для правильного изменения стейта*/\r\n        //     action.newMessageBody = action.body /* была параметр ф, а теперь мы берем его из экшена*/\r\n        //     return stateCopy\r\n        // }\r\n        case \"SEND-MESSAGE\": {\r\n            let stateCopy = {...state, messages: [...state.messages]}/* делается глубокая копия стейта и мессаджес в стейте*/\r\n            let body = action.newMessageBody/* была параметр ф, а теперь мы берем его из экшена*/\r\n\r\n\r\n            stateCopy.messages.push({id: 5, message: body})\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport styles from \"./Textarea.module.css\"\r\nimport {WrappedFieldProps} from \"redux-form\";\r\n\r\nexport const Textarea = ({input, meta, ...props}: WrappedFieldProps) => {\r\n\r\n    return (\r\n        <div className={`${styles.formControl} ${meta.touched && meta.error ? styles.error : \"\"}`}>\r\n            <div><textarea {...input} {...props} /></div>\r\n            {meta.touched && meta.error && <span>{meta.error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Users_main__pqh2t\",\"image\":\"Users_image__10RV9\",\"pagination_wrapper\":\"Users_pagination_wrapper__2wLc9\",\"selectedPage\":\"Users_selectedPage__ohqD6\",\"desc\":\"Users_desc__3xwRZ\",\"name\":\"Users_name__2HBzu\",\"wrap\":\"Users_wrap__KN6ow\",\"follow\":\"Users_follow__2ZzmM\",\"item\":\"Users_item__3-SSA\"};","import axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        \"API-KEY\": \"7c38f700-eae7-4224-81a9-9392ebf67fbb\"\r\n    }\r\n})\r\n\r\n\r\nexport const userAPI = {\r\n    getUsers(currentPage: number, pageSize: number, term: string = \"\", friend: null | boolean = null) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? \"\" : `&friend=${friend}`))  /*приклеиваем сюда baseURL и продолжение адерса*/\r\n            .then(response => response.data) /*уменьшаем получаемый респонс*/\r\n    },\r\n    follow(userID: number) {\r\n        return instance.post(`follow/${userID}`)\r\n    },\r\n    unfollow(userID: number) {\r\n        return instance.delete(`follow/${userID}`)\r\n    },\r\n    getProfile(userID: string) {\r\n        return profileAPI.getProfile(userID)\r\n    }\r\n}\r\n\r\n\r\nexport const profileAPI = {\r\n\r\n    getProfile(userID: string) {\r\n        return instance.get(`profile/` + userID)\r\n    },\r\n    getStatus(userID: string) {\r\n        return instance.get(`profile/status/` + userID)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status/`, {status})\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData()\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put(`profile/photo/`, formData, {\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: string) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe, captcha})\r\n    },\r\n    loginOut() {\r\n        return instance.delete(`auth/login`)\r\n    },\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptcha() {\r\n        return instance.get(`security/get-captcha-url`)\r\n    },\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {profileAPI, userAPI} from \"../Api/Api\";\r\n\r\n\r\nexport  type  PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\n\r\nexport type ProfileType = {\r\n    photos: PhotosType\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n}\r\ntype PhotosType = {\r\n    'small': string\r\n    'large': string\r\n}\r\ntype  ContactsType = {\r\n    facebook: string\r\n    website: null\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: null\r\n    github: string\r\n    mainLink: null\r\n}\r\n\r\n\r\nexport type  ProfilePageType = {\r\n    status: string;\r\n    posts: Array<PostsType>\r\n    profile: null | ProfileType\r\n}\r\n\r\nexport type  AddPostActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"PROFILE/ADD-POST\"\r\n    newPostText: string\r\n}\r\n\r\nexport type DeletePostActionType = ReturnType<typeof deletePostActionCreator>\r\n\r\n\r\n// export type  UpdateNewPostActionType = { /*необходимо для типизации диспатчка*/\r\n//     type: \"UPDATE-NEW-POST-TEXT\"\r\n//     newText: string\r\n// }\r\n\r\n\r\nexport type  SetUserProfileActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"PROFILE/SET-USER-PROFILE\"\r\n    profile: null | ProfileType\r\n\r\n}\r\n\r\nexport type  setStatusActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"PROFILE/SET-STATUS\"\r\n    status: string\r\n\r\n}\r\n\r\nexport type SetPhotoSuccessActionType = ReturnType<typeof savePhotoSuccess>\r\n\r\n\r\nexport type  ActionsType =\r\n    AddPostActionType\r\n    | SetUserProfileActionType\r\n    | setStatusActionType\r\n    | DeletePostActionType\r\n    | SetPhotoSuccessActionType\r\n\r\n\r\n/*Создаем инициализационный стейт для profileReducer*/\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hello\", likesCount: 8},\r\n        {id: 2, message: \"How are you?\", likesCount: 15},\r\n        {id: 3, message: \"Where are you?\", likesCount: 50},\r\n    ],\r\n    profile: null,\r\n    status: \"\"\r\n}\r\n\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: ActionsType): ProfilePageType => { /*указываем стейту инициализационное значение*/\r\n    switch (action.type) {\r\n        case \"PROFILE/SET-STATUS\": {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case \"PROFILE/ADD-POST\": {\r\n            // let newPost: PostsType = {\r\n            //     id: 5,\r\n            //     message: state.newPostText,\r\n            //     likesCount: 0\r\n            // }\r\n            return {\r\n                ...state,\r\n                posts: [{\r\n                    id: 5,\r\n                    message: action.newPostText,\r\n                    likesCount: 0\r\n                }, ...state.posts],\r\n            } /*делается копия для правильного изменения стейта*/\r\n\r\n            // stateCopy.posts.unshift(newPost) /*стейт тут приходит в пропсах это this._state.profilePage*/\r\n            // stateCopy.newPostText = \"\"\r\n            // return stateCopy\r\n            // break; /*брейк можно заменить ретурн стейт в каждом кейсе*/\r\n        }\r\n        case \"PROFILE/SET-USER-PROFILE\": {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case \"PROFILE/DELETE-POST\": {\r\n            return {...state, posts: state.posts.filter((post) => post.id != action.id)}\r\n        }\r\n        case \"PROFILE/SET-PHOTO\": {\r\n            return {...state, profile: state.profile ? {...state.profile} : null}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const addPostActionCreator = (newPostText: string): AddPostActionType => {\r\n    return {\r\n        type: \"PROFILE/ADD-POST\",\r\n        newPostText\r\n    }\r\n}\r\n\r\nexport const deletePostActionCreator = (id: number) => {\r\n    return {\r\n        type: \"PROFILE/DELETE-POST\",\r\n        id\r\n    } as const\r\n}\r\n\r\n\r\n/*ф. возвращающая экшен, ее вызывают в компоненте в диспатче\r\nи прокидывают в параметрах данные сюда. АК экспорт. его не надо прокидывать пропсами props.dispatch (updateNewPostActionCreator(text)) */\r\n\r\nexport const setUserProfile = (profile: null | ProfileType): SetUserProfileActionType => {\r\n    return {\r\n        type: \"PROFILE/SET-USER-PROFILE\",\r\n        profile\r\n    }\r\n}\r\n\r\nexport const setStatus = (status: string): setStatusActionType => {\r\n    return {\r\n        type: \"PROFILE/SET-STATUS\",\r\n        status\r\n    }\r\n}\r\n\r\nexport const savePhotoSuccess = (photos: PhotosType) => {\r\n    return {\r\n        type: \"PROFILE/SET-PHOTO\",\r\n        photos\r\n    } as const\r\n}\r\n\r\n\r\nexport const getUserProfile = (userID: string) => async (dispatch: Dispatch) => {\r\n    const response = await userAPI.getProfile(userID)\r\n    dispatch(setUserProfile(response.data))/*отправляем полученные данные в стейт*/\r\n}\r\n\r\n\r\nexport const getStatus = (userID: string) => async (dispatch: Dispatch) => {\r\n    const response = await profileAPI.getStatus(userID)\r\n    dispatch(setStatus(response.data))/*отправляем полученные данные в стейт*/\r\n}\r\n\r\nexport const updateStatus = (status: string) => async (dispatch: Dispatch) => {\r\n    const response = await profileAPI.updateStatus(status)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status))/*отправляем полученные данные в стейт*/\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: File) => async (dispatch: Dispatch) => {\r\n    const response = await profileAPI.savePhoto(file)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(savePhotoSuccess(response.data.photos))\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {SidebarType} from \"./store\";\r\n\r\n\r\nlet initialState = {\r\n    friends: [\r\n        {name: \"Ivan\"},\r\n        {name: \"Oleg\"},\r\n        {name: \"Petr\"},\r\n        {name: \"Vasa\"},\r\n        {name: \"Sergei\"},\r\n        {name: \"Margo\"}\r\n    ]\r\n}\r\n\r\n\r\nexport const sidebarReducer = (state: SidebarType = initialState, action: any) => {\r\n\r\n    return state\r\n}","import {Dispatch} from \"redux\";\r\nimport {userAPI} from \"../Api/Api\";\r\n\r\nexport type  FollowActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"USERS/FOLLOW\"\r\n    userID: number\r\n}\r\n\r\nexport type  UnFollowActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"USERS/UNFOLLOW\"\r\n    userID: number\r\n}\r\n\r\nexport type  SetUsersActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"USERS/SET-USERS\"\r\n    users: Array<UsersType>\r\n}\r\n\r\nexport type  SetCurrentPageActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"USERS/SET-CURRENT-PAGE\"\r\n    currentPage: number\r\n}\r\n\r\nexport type  SetUsersTotalCountActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"USERS/SET-CURRENT-TOTAL-COUNT\"\r\n    totalCount: number\r\n}\r\n\r\nexport type  SetPreloaderActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"USERS/SET-PRELOADER\"\r\n    isFetching: boolean\r\n}\r\nexport type  FollowingInProgressActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"USERS/FOLLOWING-IN-PROGRESS\"\r\n    userID: number\r\n    isFetching: boolean\r\n}\r\n\r\nexport type  SetFiltersActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"USERS/SET-FILTER\"\r\n    payload: {\r\n        term: string,\r\n        friend: null | boolean\r\n    }\r\n}\r\n\r\n\r\n////\r\n\r\n\r\nexport type  UsersMainType = {  /*типизация стейта локального*/\r\n    users: Array<UsersType>\r\n    pageSize: number,\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingProgress: number[],\r\n    filter: {\r\n        term: string,\r\n        friend: null | boolean\r\n    }\r\n}\r\n\r\nexport type  UsersType = {\r\n    id: number\r\n    photos: PhotosType\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: LocationType\r\n}\r\n\r\nexport type  PhotosType = {\r\n    small: null | string\r\n    large: null | string\r\n\r\n}\r\n\r\ntype  LocationType = {\r\n    city: string\r\n    country: string\r\n}\r\n\r\n\r\nexport type  ActionType =\r\n    FollowActionType\r\n    | UnFollowActionType\r\n    | SetUsersActionType\r\n    | SetCurrentPageActionType\r\n    | SetUsersTotalCountActionType\r\n    | SetPreloaderActionType\r\n    | FollowingInProgressActionType\r\n    | SetFiltersActionType\r\n\r\n\r\nlet initialState: UsersMainType = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingProgress: [],\r\n    filter: {\r\n        term: \"\",\r\n        friend: null\r\n    }\r\n}\r\n\r\n\r\nexport type FilterType = typeof initialState.filter\r\n\r\n\r\nexport const usersReducer = (state: UsersMainType = initialState, action: ActionType): UsersMainType => {\r\n    switch (action.type) {\r\n        case \"USERS/FOLLOW\": {\r\n            return {\r\n                ...state,\r\n                users: state.users.map((u) => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        }\r\n\r\n        case \"USERS/UNFOLLOW\": {\r\n            return {\r\n                ...state,\r\n                users: state.users.map((u) => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        }\r\n        case \"USERS/SET-USERS\": {\r\n            return {...state, users: action.users}\r\n        }\r\n        case \"USERS/SET-CURRENT-PAGE\": {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case \"USERS/SET-CURRENT-TOTAL-COUNT\": {\r\n            return {...state, totalUsersCount: action.totalCount}\r\n        }\r\n        case \"USERS/SET-PRELOADER\": {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case \"USERS/FOLLOWING-IN-PROGRESS\": {\r\n            return {\r\n                ...state,\r\n                followingProgress: action.isFetching\r\n                    ? [...state.followingProgress, action.userID]\r\n                    : state.followingProgress.filter((t) => t !== action.userID)\r\n\r\n            }\r\n        }\r\n        case \"USERS/SET-FILTER\": {\r\n            return {...state, filter: action.payload}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n/*Это экшен криэйторы у которых в названии в конце убрали букву AC*/\r\n\r\n\r\nexport const followSuccess = (userID: number): FollowActionType => {\r\n    return {\r\n        type: \"USERS/FOLLOW\",\r\n        userID: userID\r\n    }\r\n}\r\nexport const unFollowSuccess = (userID: number): UnFollowActionType => {\r\n    return {\r\n        type: \"USERS/UNFOLLOW\",\r\n        userID: userID\r\n    }\r\n}\r\nexport const setUsers = (users: Array<UsersType>): SetUsersActionType => {\r\n    return {\r\n        type: \"USERS/SET-USERS\",\r\n        users: users\r\n    }\r\n}\r\nexport const setFilter = (filter: FilterType): SetFiltersActionType => {\r\n    return {\r\n        type: \"USERS/SET-FILTER\",\r\n        payload: filter\r\n    }\r\n}\r\n\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageActionType => {\r\n    return {\r\n        type: \"USERS/SET-CURRENT-PAGE\",\r\n        currentPage: currentPage\r\n    }\r\n}\r\n\r\n\r\nexport const setTotalUsersCount = (totalCount: number): SetUsersTotalCountActionType => {\r\n    return {\r\n        type: \"USERS/SET-CURRENT-TOTAL-COUNT\",\r\n        totalCount: totalCount\r\n    }\r\n}\r\nexport const setPreloader = (isFetching: boolean): SetPreloaderActionType => {\r\n    return {\r\n        type: \"USERS/SET-PRELOADER\",\r\n        isFetching: isFetching\r\n    }\r\n}\r\nexport const setFollowingInProgress = (userID: number, isFetching: boolean): FollowingInProgressActionType => {\r\n    return {\r\n        type: \"USERS/FOLLOWING-IN-PROGRESS\",\r\n        userID: userID,\r\n        isFetching: isFetching\r\n    }\r\n}\r\n\r\n\r\n/*санки*/\r\n\r\nexport const getUsersThunkCreator = (currentPage: number, pageSize: number, filter: FilterType) => async (dispatch: Dispatch) => {  /*это санка*/\r\n\r\n    dispatch(setPreloader(true))\r\n    dispatch(setCurrentPage(currentPage))\r\n    dispatch(setFilter(filter))\r\n    const data = await userAPI.getUsers(currentPage, pageSize, filter.term, filter.friend)\r\n    dispatch(setPreloader(false))\r\n    dispatch(setUsers(data.items))\r\n    dispatch(setTotalUsersCount(data.totalCount))\r\n}\r\n\r\n\r\nexport const follow = (userID: number) => { /*это криэйтор санки*/\r\n    return async (dispatch: Dispatch) => {   /*это санка*/\r\n        dispatch(setFollowingInProgress(userID, true))\r\n        const response = await userAPI.follow(userID)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(followSuccess(userID))\r\n        }\r\n        dispatch(setFollowingInProgress(userID, false))\r\n    }\r\n}\r\n\r\nexport const unfollow = (userID: number) => { /*это криэйтор санки*/\r\n    return async (dispatch: Dispatch) => {   /*это санка*/\r\n        dispatch(setFollowingInProgress(userID, true))\r\n        const response = await userAPI.unfollow(userID)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(unFollowSuccess(userID))\r\n        }\r\n        dispatch(setFollowingInProgress(userID, false))\r\n    }\r\n}\r\n\r\n\r\n","import {authAPI, securityAPI} from \"../Api/Api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppThunk, StateReduxType} from \"./redux-store\";\r\nimport {FormAction} from \"redux-form\";\r\n\r\n\r\nexport type  AuthMainType = {  /*типизация стейта локального*/\r\n    id: null | number\r\n    email: null | string\r\n    login: null | string\r\n    isAuth: boolean\r\n    captchaURL: null | string\r\n}\r\n\r\nlet initialState: AuthMainType = {\r\n    id: 2,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaURL: null,\r\n}\r\n\r\n\r\nexport const authReducer = (state = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case \"AUTH/SET-USER-DATA\": {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        case \"AUTH/SET-CAPTCHA-URL\": {\r\n            return {...state, ...action.payload}\r\n\r\n            // return {...state, captchaURL: action.payload.captcha}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type  AuthMainActionType = { /*необходимо для типизации диспатчка*/\r\n    type: \"AUTH/SET-USER-DATA\"\r\n    payload: {\r\n        id: null | number\r\n        email: null | string\r\n        login: null | string\r\n        isAuth: boolean\r\n    }\r\n}\r\nexport type SetCaptchaURLActionType = ReturnType<typeof setCaptchaURL>\r\n\r\n\r\nexport type  ActionType = AuthMainActionType | SetCaptchaURLActionType\r\n\r\n\r\nexport const setUserData = (id: number | null, email: null | string, login: null | string, isAuth: boolean): AuthMainActionType => {\r\n    return {\r\n        type: \"AUTH/SET-USER-DATA\",\r\n        payload: {\r\n            id,\r\n            email,\r\n            login,\r\n            isAuth\r\n        }\r\n    }\r\n}\r\n\r\nexport const setCaptchaURL = (captchaURL: null | string) => {\r\n    return {\r\n        type: \"AUTH/SET-CAPTCHA-URL\",\r\n        payload: {\r\n            captchaURL\r\n        }\r\n    } as const\r\n}\r\n\r\n\r\n// thunk\r\nexport const getAuthUserData = (): AppThunk => async (dispatch) => {\r\n    let response = await authAPI.me()\r\n\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data\r\n        dispatch(setUserData(id, email, login, true))\r\n    } /*отправляем полученные данные в стейт*/\r\n\r\n}\r\n\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkAction<void, StateReduxType, unknown, ActionType | FormAction> => async (dispatch) => {\r\n\r\n    let response = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData())\r\n    }\r\n    if (response.data.resultCode === 10) {\r\n        dispatch(getCaptcha())\r\n    }\r\n}\r\n\r\n\r\nexport const getCaptcha = (): AppThunk => async (dispatch) => {\r\n    try {\r\n        const res = await securityAPI.getCaptcha()\r\n        const captchaURL = res.data.url\r\n        dispatch(setCaptchaURL(captchaURL))\r\n    } catch (e) {\r\n        console.log(e)\r\n    } finally {\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const loginOut = () => (dispatch: Dispatch) => {\r\n\r\n    authAPI.loginOut()  /*чтобы прееделать в асинк пишем после стрелки async тут делаем переменную и await убираем зен*/\r\n        .then((response) => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setUserData(null, null, null, false))\r\n            }\r\n        })\r\n\r\n}\r\n\r\n","import {getAuthUserData} from \"./auth-reduсer\";\r\nimport {AppThunk} from \"./redux-store\";\r\n\r\nexport type  initializedActionType = {\r\n    type: \"INITIALIZED-SUCCESSES\"\r\n}\r\n//\r\n\r\n\r\nexport type  AuthMainType = {  /*типизация стейта локального*/\r\n    initialized: boolean,\r\n}\r\n\r\n\r\nexport type  ActionType = initializedActionType\r\n\r\n\r\nlet initialState: AuthMainType = {\r\n    initialized: false,\r\n}\r\n\r\n\r\nexport const appReducer = (state: AuthMainType = initialState, action: ActionType): AuthMainType => {\r\n    switch (action.type) {\r\n\r\n        case \"INITIALIZED-SUCCESSES\": {\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const initializedSuccess = (): initializedActionType => {\r\n    return {\r\n        type: \"INITIALIZED-SUCCESSES\",\r\n    }\r\n}\r\n\r\nexport const initializeApp = (): AppThunk => async (dispatch) => {\r\n    await dispatch(getAuthUserData())\r\n    dispatch(initializedSuccess())\r\n}\r\n\r\n//\r\n// export const login = (email: string, password: string, rememberMe: boolean): ThunkAction<void, StateReduxType, unknown, ActionType | FormAction> => (dispatch) => {\r\n//\r\n//     authAPI.login(email, password, rememberMe)\r\n//         .then((response) => {\r\n//             if (response.data.resultCode === 0) {\r\n//                 dispatch(getAuthUserData())\r\n//             }\r\n//         })\r\n//\r\n// }\r\n//\r\n//\r\n// export const loginOut = () => (dispatch: Dispatch) => {\r\n//\r\n//     authAPI.loginOut()\r\n//         .then((response) => {\r\n//             if (response.data.resultCode === 0) {\r\n//                 dispatch(setUserData(null, null, null, false))\r\n//             }\r\n//         })\r\n//\r\n// }\r\n\r\n","import {\r\n    AnyAction,\r\n    applyMiddleware,\r\n    combineReducers,\r\n    compose,\r\n    createStore,\r\n    Store\r\n} from \"redux\";\r\nimport {dialogsReducer} from \"./dialogs-reduсer\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {sidebarReducer} from \"./sidebar-reducer\";\r\nimport {usersReducer} from \"./users-reduсer\";\r\nimport {authReducer} from \"./auth-reduсer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {appReducer} from \"./app-reduсer\";\r\n\r\n\r\nlet reducers = combineReducers({ /*создается общий редьюсер с помощью спец команды, внутрь котор вставляют редюсеры имеющиеся*/\r\n    dialogsPage: dialogsReducer,  /*ключ это элем общий из стейта, значя относящийся к нему релдьюсер*/\r\n    profilePage: profileReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    appReducer: appReducer\r\n})\r\n\r\n// const composeEnhancers = window['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__'] as typeof compose || compose;\r\nconst composeEnhancers = (window && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store: Store<StateReduxType> = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n\r\nexport type StateReduxType = ReturnType<typeof reducers>/*скопировал из впервой версии*/\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, StateReduxType, unknown, AnyAction>\r\n\r\n// export let store: Store<StateReduxType> = createStore(reducers) /*это шаблон создания стора*/\r\n// export let store: Store<StateReduxType> = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n// export let store: any = createStore(reducers) /*это шаблон создания стора help*/\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport styles from \"./../Friends.module.css\";\r\n\r\n\r\ntype  FriendPropsType = {\r\n    name:string\r\n\r\n}\r\n\r\n\r\nexport const Friend = (props:FriendPropsType) => {\r\n    return (\r\n        <div className={styles.item}>\r\n            <div className={styles.images}>\r\n                <img className={styles.image} src=\"https://www.film.ru/sites/default/files/news/44976246-1097247.jpg\" alt=\"\"/>\r\n            </div>\r\n            <div className={styles.name}>\r\n                <span>{props.name}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport {FriendsType} from \"../../redux/store\";\r\nimport {Friend} from \"./Friend/Friend\";\r\nimport styles from \"./Friends.module.css\";\r\n\r\n\r\ntype  FriendsPropsType = {\r\n    names: Array<FriendsType>\r\n}\r\n\r\nexport const Friends = (props: FriendsPropsType) => {\r\n    return (\r\n        <div className={styles.main}>\r\n            <h3>Best Friends</h3>\r\n            <div className={styles.row}>\r\n                {props.names.map((t, index) => <Friend name={t.name} key={index}/>)}\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\n\r\nimport styles from \"./Navbar.module.css\"\r\nimport {NavLink} from 'react-router-dom';\r\nimport {Friends} from \"../Friends/Friends\";\r\nimport {store} from \"../../redux/redux-store\";\r\n\r\n\r\ntype  NavbarPropsType = {\r\n    // state: SidebarType\r\n}\r\n\r\nexport const Navbar = (props: NavbarPropsType) => {\r\n    return (\r\n        <nav className={styles.nav}>\r\n            <div className={styles.menu}>\r\n                <div><NavLink activeClassName={styles.active} to=\"/profile\">Profile</NavLink></div>\r\n                <div><NavLink activeClassName={styles.active} to=\"/dialogs\">Dialogs</NavLink></div>\r\n                <div><NavLink activeClassName={styles.active} to=\"/news\">News</NavLink></div>\r\n                <div><NavLink activeClassName={styles.active} to=\"/music\">Music</NavLink></div>\r\n\r\n            </div>\r\n            <div className={styles.friends}>\r\n                <Friends names={store.getState().sidebar.friends}/>\r\n            </div>\r\n            <div><NavLink className={styles.users} activeClassName={styles.active} to=\"/users\">Users</NavLink></div>\r\n\r\n        </nav>\r\n    );\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/mountain.ed14195c.jpg\";","export default __webpack_public_path__ + \"static/media/3.b98a8c76.svg\";","import React from 'react';\r\nimport preloader from \"../../img/3.svg\";\r\nimport styles from\"./Preloader.module.css\"\r\n\r\nexport const Preloader =() => {\r\n return (\r\n        <div className={styles.main}>\r\n            <img  className={styles.img} alt={\"preloader\"} src={preloader}/>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useEffect, useState} from 'react';\r\n\r\ntype  StatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\ntype  StatusStateType = {\r\n    status: string\r\n    editMode: boolean\r\n}\r\n\r\n\r\nexport const ProfileStatus = (props: StatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [status, setStatus] = useState<string>(props.status);\r\n\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const ofEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n\r\n    }\r\n\r\n\r\n    const onStatusKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            ofEditMode()\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode\r\n                ?\r\n                <div>\r\n                    <span onDoubleClick={onEditMode}>{props.status}</span>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <input onKeyPress={onStatusKeyPress} onChange={onStatusChange}\r\n                           autoFocus={true} onBlur={ofEditMode}\r\n                           value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/img.61f53e90.png\";","import styles from \"./ProfileInfo.module.css\";\r\nimport mountains from \"../../../img/mountain.jpg\";\r\nimport React, {ChangeEventHandler} from \"react\";\r\nimport {Preloader} from \"../../preloader/Preloader\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\nimport userPhoto from \"../../../img/img.png\";\r\n\r\ntype  ProfileInfoPropsType = {\r\n    profile: null | ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    if (!props.profile) {   /*как это влияет на отрисовку профиля?????*/\r\n        return <Preloader/>\r\n    }\r\n\r\n\r\n    const onInputFileChose: ChangeEventHandler<HTMLInputElement> = (e) => {\r\n\r\n        if (e.target.files && e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <img className={styles.img} src={mountains} alt=\"\"/>\r\n            <div className={styles.profile__wrapper}>\r\n                <h2>Name and Description</h2>\r\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n                <img alt={\"some pic\"} className={styles.image}\r\n                     src={props.profile.photos.large || userPhoto}/>\r\n                {props.isOwner && <input type={\"file\"} onChange={onInputFileChose}/>}\r\n                <div><b>About me: {props.profile.aboutMe}</b> </div>\r\n                <div><b>Looking for a job:</b> {!props.profile.lookingForAJob ? \"Yes\" : \"No\"}</div>\r\n                <div><b> My real name is</b>  {props.profile.fullName[0].toUpperCase() + props.profile.fullName.slice(1)}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/bird.5ea64365.jpg\";","import React from 'react';\r\nimport styles from \"./Post.module.css\"\r\nimport bird from \"../../../../img/bird.jpg\";\r\n\r\n\r\ntype  PostPropsType = {\r\n    message: string\r\n    likes: number\r\n}\r\n\r\nexport const Post = (props:PostPropsType) => {\r\n    return (\r\n        <div className={styles.post}>\r\n            <img className={styles.img} src={bird} alt=\"\"/>\r\n\r\n            <div className={styles.wrap}>\r\n                <div>{props.message} </div>\r\n                <div>Likes {props.likes}</div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport styles from \"./MyPosts.module.css\"\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostsType} from \"../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../FormsControls/Textarea\";\r\n\r\ntype  MyPostsPropsType = {\r\n    posts: Array<PostsType>\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\ntype  FormType = {\r\n    newPostText: string\r\n}\r\n\r\nlet maxLength = maxLengthCreator(15)\r\n\r\n\r\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n    const onAddPost = (values: FormType) => {\r\n        if (values) {\r\n            props.addPost(values.newPostText)\r\n        }\r\n    }\r\n    return (\r\n        <div className={styles.posts}>\r\n            <div className={styles.main}>\r\n                <h2>My Posts</h2>\r\n                <AddNewPostForm onSubmit={onAddPost}/>\r\n            </div>\r\n            {props.posts.map((t, index) => <Post key={index} message={t.message} likes={t.likesCount}/>)}\r\n        </div>\r\n    );\r\n});\r\n\r\nconst AddNewPost = (props: InjectedFormProps<FormType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={\"newPostText\"} component={Textarea} validate={[required, maxLength]} placeholder={\"Post message\"}/>\r\n            </div>\r\n            <button>Add post</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostForm = reduxForm<FormType>({form: \"ProfileAddNewPost\"})(AddNewPost)","import {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {addPostActionCreator} from '../../../redux/profile-reducer';\r\nimport {Dispatch} from \"redux\";\r\nimport {StateReduxType} from \"../../../redux/redux-store\";\r\n\r\n\r\nexport const mapStateToProps = (state: StateReduxType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        // newPostText: state.profilePage.newPostText\r\n\r\n    }\r\n}\r\nexport const mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n\r\n}\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)/*коннект имеет локальный субскрайб*/","import React from 'react';\r\nimport styles from \"./Profile.module.css\"\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\n\r\ntype  ProfilePropsType = {\r\n   // profilePage: ProfilePageType\r\n    // addPost: () => void\r\n    // updateNewPostText: (newText: string) => void\r\n    //dispatch: (action: ActionsType) => void\r\n    profile: null | ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: any) => void\r\n}\r\n\r\n\r\n\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n\r\n\r\n    return (\r\n        <div className={styles.profile}>\r\n            <ProfileInfo savePhoto={props.savePhoto} isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport styles from \"./Profile.module.css\"\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    getStatus,\r\n    getUserProfile,\r\n    ProfileType, savePhoto,\r\n    updateStatus\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {StateReduxType} from \"../../redux/redux-store\";\r\n\r\ntype  ProfileContainerPropsType = {\r\n    // setUserProfile: (profile: ProfileType) => void\r\n    profile: null | ProfileType\r\n    getUserProfile: (userID: string) => void\r\n    getStatus: (userID: string) => void\r\n    updateStatus: (status: string) => void\r\n    status: string\r\n    savePhoto: (file: any) => void\r\n}\r\ntype  PropsType = RouteComponentProps<PathType> & ProfileContainerPropsType  /*типизация пришедшего пути браузера*/\r\ntype  PathType = {\r\n    userId: string\r\n}\r\n\r\nclass ProfileContainer extends React.Component <PropsType, StateReduxType> {\r\n\r\n    refreshProfile() {\r\n        let userID = this.props.match.params.userId\r\n        if (!userID) {\r\n            userID = \"19115\"\r\n            if (!userID) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userID)\r\n        this.props.getStatus(userID)\r\n    }\r\n\r\n\r\n    componentDidMount() {   /*метод жизненного цикла, тут все запросы на сервер*/\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<StateReduxType>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.profile}>\r\n                <Profile {...this.props} profile={this.props.profile}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                         savePhoto={this.props.savePhoto}\r\n                /> {/*все пришедшие пропсы прокидываю дальше*/}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// let AuthRedirectComponent = WithAuthRedirect(ProfileContainer)\r\n\r\n\r\nlet mapStateToProps = (state: StateReduxType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status\r\n    }\r\n}\r\n\r\n\r\n// let ProfileWithUrl = withRouter(AuthRedirectComponent)\r\n// export default connect(mapStateToProps, {getUserProfile})(ProfileWithUrl)\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus,  savePhoto}),\r\n    withRouter,\r\n    // WithAuthRedirect\r\n)(ProfileContainer)","export default __webpack_public_path__ + \"static/media/dragon.5ce493a6.png\";","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport dragon from \"../../img/dragon.png\";\r\nimport styles from \"./Header.module.css\"\r\n\r\ntype  HeaderPropsType = {\r\n    // setUserData: (id: number, email: null | string, login: null | string) => void\r\n    isAuth: boolean\r\n    login: null | string\r\n    loginOut: () => void\r\n}\r\n\r\n\r\nexport const Header = (props: HeaderPropsType) => {\r\n    return (\r\n        <header className={styles.header}>\r\n            <img className={styles.img} src={dragon} alt=\"\"/>\r\n            <div className={styles.auth}>\r\n                {props.isAuth ? <div>{props.login} <button onClick={props.loginOut}>Log out</button></div> :\r\n                    <NavLink to=\"/login\">Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport {Header} from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {loginOut} from \"../../redux/auth-reduсer\";\r\nimport {StateReduxType} from \"../../redux/redux-store\";\r\n\r\ntype  HeaderContainerPropsType = {\r\n    // setUserData: (id: number, email: null | string, login: null | string) => void\r\n    isAuth: boolean\r\n    login: null | string\r\n\r\n    loginOut: any\r\n}\r\n\r\n\r\nclass HeaderContainer extends React.Component <HeaderContainerPropsType, StateReduxType> {\r\n\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: StateReduxType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {loginOut})(HeaderContainer)","import styles from \"./Textarea.module.css\";\r\nimport React from \"react\";\r\nimport {WrappedFieldProps} from \"redux-form\";\r\n\r\nexport const Input = ({input, meta, ...props}: WrappedFieldProps) => {\r\n\r\n    return (\r\n        <div className={`${styles.formControl} ${meta.touched && meta.error ? styles.error : \"\"}`}>\r\n            <div><input {...input} {...props} /></div>\r\n            {meta.touched && meta.error && <span>{meta.error}</span>}\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../FormsControls/Input\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {login} from \"../../redux/auth-reduсer\";\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {StateReduxType} from \"../../redux/redux-store\";\r\n\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captchaURL: string | null\r\n    captcha: string\r\n\r\n}\r\n// type MSTP = {\r\n//     isAuth: boolean\r\n//     captchaURL: string | null\r\n// }\r\n// type MDTP = {\r\n//     login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n// }\r\n// type LoginPropsType = MSTP & MDTP\r\n// type LoginPropsType = MDTP\r\n\r\n// interface LoginFormProps extends InjectedFormProps<FormDataType> {\r\n//     captchaURL: string | null\r\n// }\r\n\r\nconst LoginForm = ({handleSubmit, initialValues}: InjectedFormProps<FormDataType>) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><Field placeholder={\"Login\"} name={\"email\"} validate={[required]}\r\n                        component={Input}/></div>\r\n            <div><Field placeholder={\"Password\"} validate={[required]} type={\"password\"}\r\n                        name={\"password\"}\r\n                        component={Input}/></div>\r\n            <div><Field component={Input} name={\"rememberMe\"} type={\"checkbox\"}/>Remember\r\n                Me\r\n            </div>\r\n            {initialValues.captchaURL &&\r\n            <img alt={\"capture\"} src={initialValues.captchaURL}/>}\r\n            {initialValues.captchaURL &&\r\n            <Field placeholder={\"Type text from captcha\"} component={Input}\r\n                   validate={[required]} name={\"captcha\"} type={\"input\"}/>}\r\n\r\n\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst LoginFormRedux = reduxForm<FormDataType>({\r\n    // a unique name for the form\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\nexport const Login = () => {       /*какие пропсы\r\n типизация*/\r\n\r\n\r\n    const captchaURL = useSelector<StateReduxType, string | null>(state => state.auth.captchaURL)\r\n    const isAuth = useSelector<StateReduxType, boolean>(state => state.auth.isAuth)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n        // login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginFormRedux onSubmit={onSubmit} initialValues={{captchaURL}}/>\r\n        </div>\r\n    );\r\n};\r\n\r\n// const mapStateToProps = (state: StateReduxType): MSTP => ({\r\n//     captchaURL: state.auth.captchaURL,\r\n//     isAuth: state.auth.isAuth\r\n// })\r\n// export default connect<MDTP, {}, StateReduxType>(null, {login})(Login)","import React from 'react';\r\nimport styles from \"./News.module.css\"\r\n\r\n\r\nexport const News = React.memo(() => {\r\n    return (\r\n        <div>\r\n            <h2 className={styles.title}>News</h2>\r\n            <div className={styles.body}></div>\r\n        </div>\r\n    );\r\n});\r\n\r\n","import React from 'react';\r\nimport styles from \"./Music.module.css\"\r\n\r\n\r\nexport const Music = React.memo(() => {\r\n    return (\r\n        <div>\r\n            <h2 className={styles.title}>Music</h2>\r\n            <div className={styles.body}></div>\r\n        </div>\r\n    );\r\n});\r\n\r\n","export default __webpack_public_path__ + \"static/media/neand.5e875fa6.png\";","import React, {useState} from 'react';\r\nimport styles from \"./Users.module.css\";\r\nimport {returntypeof} from \"react-redux-typescript\";\r\n\r\ntype  UsersNewPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    OnPageHandler: (pageNumber: number) => void\r\n    portionSize: number\r\n}\r\n\r\nexport const Paginator = ({\r\n                              totalUsersCount,\r\n                              pageSize,\r\n                              currentPage,\r\n                              OnPageHandler,\r\n                              portionSize = 10\r\n                          }: UsersNewPropsType) => {\r\n\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize)/* Math.ceil округляет число в большую сторону*/\r\n    let pages: Array<number> = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    const portionCount = Math.ceil(pagesCount / portionSize)\r\n    const [portionNumber, setPortionNumber] = useState<number>(1);\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    const rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    return (\r\n        <div className={styles.main}>\r\n            <div className={styles.pagination_wrapper}>\r\n                {portionNumber > 1 &&\r\n                <button onClick={() => {\r\n                    setPortionNumber(portionNumber - 1)\r\n                }}>PREV</button>}\r\n                {pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber).map((t) => {\r\n                    return <span key={t}\r\n                          className={currentPage === t ? styles.selectedPage : \"\"}\r\n                          onClick={() => {\r\n                              OnPageHandler(t)\r\n                          }}>{t}</span>})}\r\n                {portionCount>portionNumber &&\r\n                <button onClick={() => {\r\n                    setPortionNumber(portionNumber + 1)\r\n                }}>NEXT</button>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import {Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport {FilterType} from \"../../redux/users-reduсer\";\r\n\r\n\r\ntype  UsersSearchFormPropsType = {\r\n    OnFilterHandler: (filter: FilterType) => void\r\n}\r\n\r\n\r\ntype  FormType = {\r\n    term: string\r\n    friend: \"true\" | \"false\" | \"null\"\r\n}\r\n\r\nexport const UsersSearchForm = React.memo((props: UsersSearchFormPropsType) => {\r\n\r\n\r\n    // const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n    //     const filter: FilterType = {\r\n    //         term: values.term,\r\n    //         friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\r\n    //     }\r\n    //\r\n    //\r\n    //     props.OnFilterHandler(filter)\r\n    //     setSubmitting(false)\r\n    // }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{term: '', friend: \"null\"}}\r\n                validate={values => {\r\n                    const errors = {};\r\n                    return errors;\r\n                }}\r\n                onSubmit={(values, {setSubmitting}) => {\r\n                    const filter: FilterType = {\r\n                        term: values.term,\r\n                        friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\r\n                    }\r\n                    props.OnFilterHandler(filter)\r\n                    setSubmitting(false)\r\n                }}\r\n            >\r\n                {({isSubmitting}) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"term\"/> {/*имя согласовывается с\r\n                         initialValues*/}\r\n                        <Field name=\"friend\" as=\"select\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only Followed</option>\r\n                            <option value=\"false\">UnFollowed</option>\r\n                        </Field>\r\n\r\n\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Find\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n})","import {StateReduxType} from \"./redux-store\";\r\nimport {createSelector} from \"reselect\";\r\nimport {UsersType} from \"./users-reduсer\";\r\n\r\nexport const getUsers = (state: StateReduxType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsersSuper = createSelector(getUsers, (users: Array<UsersType>) => {\r\n    return users.map((user) => user)\r\n})\r\n\r\n// export const getUsersSuper = createSelector(getUsers, getPageSize (users: Array<UsersType>, pageSize: number) => {\r\n//     return users.map((user) => true)\r\n// })\r\n\r\n\r\nexport const getPageSize = (state: StateReduxType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: StateReduxType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: StateReduxType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: StateReduxType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingProgress = (state: StateReduxType) => {\r\n    return state.usersPage.followingProgress\r\n}\r\n\r\nexport const getUserFilter= (state: StateReduxType) => {\r\n    return state.usersPage.filter\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport styles from \"./Users.module.css\";\r\nimport image from \"../../img/neand.png\";\r\nimport {\r\n    FilterType,\r\n    follow,\r\n    getUsersThunkCreator,\r\n    unfollow,\r\n    UsersType\r\n} from \"../../redux/users-reduсer\";\r\nimport {NavLink} from 'react-router-dom';\r\nimport {Paginator} from \"./Paginator\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {UsersSearchForm} from \"./UsersSearchForm\";\r\nimport {StateReduxType} from \"../../redux/redux-store\";\r\nimport {getCurrentPage, getPageSize} from \"../../redux/users-selectors\";\r\n\r\n\r\nexport const Users = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const totalUsersCount = useSelector<StateReduxType, number>(state => state.usersPage.totalUsersCount)\r\n    const currentPage = useSelector<StateReduxType, number>(getCurrentPage)\r\n    const pageSize = useSelector<StateReduxType, number>(getPageSize)\r\n    const filter = useSelector<StateReduxType, FilterType>(state => state.usersPage.filter)\r\n    const users = useSelector<StateReduxType, Array<UsersType>>(state => state.usersPage.users)\r\n    const followingInProgress = useSelector<StateReduxType, Array<number>>(state => state.usersPage.followingProgress)\r\n\r\n    useEffect(() => {\r\n        dispatch(getUsersThunkCreator(currentPage, pageSize, filter))\r\n    }, [])\r\n\r\n\r\n    const OnClickPageHandler = (pageNumber: number) => {\r\n        dispatch(getUsersThunkCreator(pageNumber, pageSize, filter))\r\n    }\r\n\r\n    const OnFilterHandler = (filter: FilterType) => {\r\n        dispatch(getUsersThunkCreator(1, pageSize, filter))\r\n    }\r\n\r\n    const followUser = (userID: number) => {\r\n        dispatch(follow(userID))\r\n    }\r\n\r\n\r\n    const unfollowUser = (userID: number) => {\r\n        dispatch(unfollow(userID))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={styles.main}>\r\n\r\n            <UsersSearchForm OnFilterHandler={OnFilterHandler}/>\r\n\r\n            <Paginator currentPage={currentPage}\r\n                       OnPageHandler={OnClickPageHandler}\r\n                       totalUsersCount={totalUsersCount} pageSize={pageSize}\r\n                       portionSize={10}\r\n            />\r\n\r\n            {users.map((u) => {\r\n                    return <div className={styles.item} key={u.id}>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={\"/profile/\" + u.id}>\r\n                        <img className={styles.image}\r\n                             src={u.photos.small !== null ? u.photos.small : image}\r\n                             alt=\"\"/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div className={styles.follow}> {u.followed\r\n                        ?\r\n                        <button\r\n                            disabled={followingInProgress.some((t) => t === u.id)}\r\n                            onClick={() => {\r\n                                unfollowUser(u.id)\r\n                            }}>Unfollow</button>\r\n                        :\r\n                        <button\r\n                            disabled={followingInProgress.some((t) => t === u.id)}\r\n                            onClick={() => {\r\n                                followUser(u.id)\r\n                            }}\r\n                        >Follow</button>}\r\n                    </div>\r\n                      <span>\r\n                            <div className={styles.wrap}>\r\n                    <span className={styles.desc}>Name</span> <div\r\n                                className={styles.name}>{u.name}</div>\r\n\r\n                    </div>\r\n\r\n                </span>\r\n                </span>\r\n\r\n                    </div>\r\n                }\r\n            )\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport {useSelector} from \"react-redux\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../preloader/Preloader\";\r\nimport {StateReduxType} from \"../../redux/redux-store\";\r\n\r\n\r\n\r\n\r\nexport const UsersContainer = React.memo(() => {\r\n\r\n    const isFetching = useSelector<StateReduxType, boolean>(state => state.usersPage.isFetching)\r\n\r\n\r\n    return (\r\n        <>\r\n            {isFetching ? <Preloader/> : null}\r\n            <Users/>\r\n        </>\r\n    );\r\n});\r\n\r\n\r\n\r\n","import React, {Suspense} from 'react';\r\nimport './App.css';\r\n\r\nimport {Redirect, Route, Switch, withRouter} from 'react-router-dom';\r\nimport {Navbar} from './components/Navbar/Navbar';\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport {Login} from \"./components/Login/Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/app-reduсer\";\r\nimport {StateReduxType} from \"./redux/redux-store\";\r\nimport {Preloader} from \"./components/preloader/Preloader\";\r\nimport { News } from './components/News/News';\r\nimport { Music } from './components/Music/Music';\r\nimport {UsersContainer} from \"./components/Users/UsersContainer\";\r\n\r\n\r\n\r\n// import DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));/*ленивая загрузка компоненты*/\r\n\r\n\r\ntype AppPropsType = {\r\n    initializeApp: () => void\r\n    initialized: boolean\r\n}\r\n\r\nclass App extends React.Component<AppPropsType> {\r\n\r\n    componentDidMount() {   /*метод жизненного цикла, тут все зхапосы на сервер*/\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <HeaderContainer/>\r\n                {/*<Navbar state={props.store.sidebar}/>*/}\r\n                <Navbar/>\r\n                <div className={\"profile\"}>\r\n                    <Switch>\r\n                        <Route exact path=\"/\" render={() => <Redirect to=\"/profile\"/>}/>\r\n\r\n                        {/*<Route path=\"/dialogs\" render={() => <Dialogs  dispatch={props.dispatch} state={props.store.getState().dialogsPage}/>}/>*/}\r\n                        <Route path=\"/dialogs\"\r\n                               render={() => <Suspense fallback={<div>Loading...</div>}>\r\n                                   <DialogsContainer/></Suspense>}/>\r\n                        {/*<Route path=\"/dialogs\" render={() => <Dialogs  dispatch={props.dispatch} state={props.store.dialogsPage}*/}\r\n                        <Route path=\"/profile/:userId?\"\r\n                               render={() =>\r\n                                   <ProfileContainer/>} /*пробрасываем диспатч вмеесто функцый*//>\r\n                        <Route path=\"/users\" render={() =>\r\n                            <UsersContainer/>} /*пробрасываем диспатч вмеесто функцый*//>\r\n                        <Route path=\"/login\" render={() =>\r\n                            <Login/>} /*пробрасываем диспатч вмеесто функцый*//>\r\n                        <Route path=\"/news\" render={() =>\r\n                            <News/>}/>\r\n                        <Route path=\"/music\" render={() =>\r\n                            <Music/>}/>\r\n                    </Switch>\r\n                    {/*<Dialogs/>*/}\r\n                    {/*<Profile/>*/}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: StateReduxType): MapStateToPropsType => {\r\n    return {\r\n        initialized: state.appReducer.initialized\r\n    }\r\n}\r\n\r\n\r\ntype  MapStateToPropsType = {\r\n    initialized: boolean\r\n}\r\ntype  MapDispatchToProps = {\r\n    initializeApp: () => void\r\n}\r\n\r\ntype  OwnProps = {}\r\n\r\nexport default compose<React.ComponentType>(withRouter, connect<MapStateToPropsType, MapDispatchToProps, OwnProps, StateReduxType>(mapStateToProps, {initializeApp}))(App)\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport './index.css';\r\nimport {store} from \"./redux/redux-store\";\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\r\nimport {Provider} from 'react-redux';\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>{/*позволяет стор  засунуть в контектс*/}\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2i0I_\",\"menu\":\"Navbar_menu__3b9Ky\",\"active\":\"Navbar_active__2kMfW\",\"users\":\"Navbar_users__ruFIE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Friends_main__1XAM0\",\"row\":\"Friends_row__35Bt8\",\"item\":\"Friends_item__1Uooj\",\"images\":\"Friends_images__2gbUq\",\"name\":\"Friends_name__33fB7\"};","export const required: any = (value: any) => {\r\n    return value ? undefined : \"Field is required\"\r\n}\r\n\r\n\r\n\r\n\r\nexport const maxLengthCreator  = (maxLength: number) => (value: any): any=> {\r\n    return value && value.length > maxLength ? `Max length is ${maxLength} symbols` : undefined\r\n\r\n\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"Textarea_formControl__50Apl\",\"error\":\"Textarea_error__2O4Pd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__2LSn5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"ProfileInfo_img__2lCOw\",\"image\":\"ProfileInfo_image__2Jz3F\",\"profile__wrapper\":\"ProfileInfo_profile__wrapper__F4K3S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__3wUTQ\",\"wrap\":\"Post_wrap__bSfXB\",\"img\":\"Post_img__2LJI8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"Header_img__214aN\",\"header\":\"Header_header__2xpWK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Preloader_main__1a-af\",\"img\":\"Preloader_img__2tHPs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__TOD2P\",\"main\":\"MyPosts_main__2ptLK\"};"],"sourceRoot":""}